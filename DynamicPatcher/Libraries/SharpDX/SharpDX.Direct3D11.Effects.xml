<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpDX.Direct3D11.Effects</name>
    </assembly>
    <members>
        <member name="T:SharpDX.Direct3D11.AssemblyDoc">
            <summary>
            The <see cref="A:SharpDX.Direct3D11.Effects"/> assembly provides Effects11 managed API for Direct3D11.
            </summary>
            <msdn-id>ff476080</msdn-id>
            <unmanaged>Direct3D11</unmanaged>	
            <unmanaged-short>Direct3D11</unmanaged-short>	
        </member>
        <member name="T:SharpDX.Direct3D11.D3DX11Effects">
            <summary>	
            Functions	
            </summary>	
            <!-- Failed to insert some or all of included XML --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='SharpDX.Direct3D11.D3DX11Effects']/*" />	
            <summary>
            Functions
            </summary>
        </member>
        <member name="M:SharpDX.Direct3D11.D3DX11Effects.CreateEffectFromMemory(System.IntPtr,SharpDX.PointerSize,System.Int32,SharpDX.Direct3D11.Device,SharpDX.Direct3D11.Effect,System.String)">
            <summary>	
            <p>Creates an effect from a binary effect or file.</p>	
            </summary>	
            <param name="dataRef"><dd>  <p>Blob of compiled effect data.</p> </dd></param>	
            <param name="dataLength"><dd>  <p>Length of the data blob.</p> </dd></param>	
            <param name="fXFlags"><dd>  <p>No effect flags exist. Set to zero.</p> </dd></param>	
            <param name="deviceRef"><dd>  <p>Pointer to the <strong><see cref="T:SharpDX.Direct3D11.Device" /></strong> on which to create Effect resources.</p> </dd></param>	
            <param name="effectOut"><dd>  <p>Address of the newly created <strong><see cref="T:SharpDX.Direct3D11.Effect" /></strong> interface.</p> </dd></param>	
            <param name="srcName">No documentation.</param>	
            <returns><p>The return value is one of the values listed in Direct3D 11 Return Codes.</p></returns>	
            <remarks>	
            <p><strong>Note</strong>??You must use Effects 11 source to build  your effects-type application. For more info about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
            </remarks>	
            <!-- Failed to insert some or all of included XML --><include file=".\..\Documentation\CodeComments.xml" path="/comments/comment[@id='D3DX11CreateEffectFromMemory']/*" />	
            <msdn-id>ff476273</msdn-id>	
            <unmanaged>HRESULT D3DX11CreateEffectFromMemory([In, Buffer] const void* pData,[In] SIZE_T DataLength,[In] unsigned int FXFlags,[In] ID3D11Device* pDevice,[Out, Fast] ID3DX11Effect** ppEffect,[In, Optional] const char* srcName)</unmanaged>	
            <unmanaged-short>D3DX11CreateEffectFromMemory</unmanaged-short>	
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.#ctor(SharpDX.Direct3D11.Device,System.Byte[],SharpDX.D3DCompiler.EffectFlags,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpDX.Direct3D11.Effect"/> class.
            </summary>
            <param name="device">The device.</param>
            <param name="effectByteCode">The effect byte code.</param>
            <param name="fxFlags">Effect compile options</param>
            <param name="srcName">Name of the effect source file.</param>
        </member>
        <member name="P:SharpDX.Direct3D11.Effect.IsValid">
            <summary>
            <p>Test an effect to see if it contains valid syntax.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476844</doc-id>
            <unmanaged>IsValid</unmanaged>
            <unmanaged-short>IsValid</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.Effect.Device">
            <summary>
            <p>Get the device that created the effect.</p>
            </summary>
            <remarks>
            <p>An effect is created for a specific device, by calling a function such as <strong>D3DX11CreateEffectFromMemory</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476835</doc-id>
            <unmanaged>GetDevice</unmanaged>
            <unmanaged-short>GetDevice</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.Effect.Description">
            <summary>
            <p>Get an effect description.</p>
            </summary>
            <remarks>
            <p>An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476834</doc-id>
            <unmanaged>GetDesc</unmanaged>
            <unmanaged-short>GetDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.Effect.ClassLinkage">
            <summary>
            <p>Gets a class linkage interface.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476831</doc-id>
            <unmanaged>GetClassLinkage</unmanaged>
            <unmanaged-short>GetClassLinkage</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.Effect.IsOptimized">
            <summary>
            <p>Test an effect to see if the reflection metadata has been removed from memory.</p>
            </summary>
            <remarks>
            <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect,  and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by  an effect by calling <strong>ID3DX11Effect::Optimize</strong> which removes the reflection metadata from memory. Of course, API methods to read variables  will no longer work once reflection data has been removed.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476843</doc-id>
            <unmanaged>IsOptimized</unmanaged>
            <unmanaged-short>IsOptimized</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.IsValid_">
            <summary>
            <p>Test an effect to see if it contains valid syntax.</p>
            </summary>
            <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476844</doc-id>
            <unmanaged>BOOL ID3DX11Effect::IsValid()</unmanaged>
            <unmanaged-short>ID3DX11Effect::IsValid</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetDevice(SharpDX.Direct3D11.Device@)">
            <summary>
            <p>Get the device that created the effect.</p>
            </summary>
            <param name = "deviceOut"><dd>  <p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.Device"/></strong>.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>An effect is created for a specific device, by calling a function such as <strong>D3DX11CreateEffectFromMemory</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476835</doc-id>
            <unmanaged>HRESULT ID3DX11Effect::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetDevice</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetDescription(SharpDX.Direct3D11.EffectDescription@)">
            <summary>
            <p>Get an effect description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to an effect description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476834</doc-id>
            <unmanaged>HRESULT ID3DX11Effect::GetDesc([Out] D3DX11_EFFECT_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetConstantBufferByIndex(System.Int32)">
            <summary>
            <p>Get a constant buffer by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to a <strong><see cref = "T:SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
            <remarks>
            <p>An effect that contains a variable that will be read/written by an application requires at least one constant buffer.  For best performance, an effect should organize variables into one or more constant buffers based on their frequency of update.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476832</doc-id>
            <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11Effect::GetConstantBufferByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetConstantBufferByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetConstantBufferByName(System.String)">
            <summary>
            <p>Get a constant buffer by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The constant-buffer name.</p> </dd></param>
            <returns><p>A reference to the constant buffer indicated by the Name. See <strong><see cref = "T:SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
            <remarks>
            <p>An effect that contains a variable that will be read/written by an application requires at least one constant buffer. For best performance,  an effect should organize variables into one or more constant buffers based on their frequency of update.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476833</doc-id>
            <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11Effect::GetConstantBufferByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetConstantBufferByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetVariableByIndex(System.Int32)">
            <summary>
            <p>Get a variable by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to a <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a technique  are local to that technique. You can access any local non-static effect variable using its name or with an index.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> if a variable is not found; you can  call <strong>ID3DX11Effect::IsValid</strong> to verify whether or not the index exists.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476840</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetVariableByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetVariableByName(System.String)">
            <summary>
            <p>Get a variable by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The variable name.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.  Returns an invalid variable if the specified name cannot be found.</p></returns>
            <remarks>
            <p>An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a  technique are local to that technique. You can access an effect variable using its name or with an index.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> whether or not a variable is found. <strong>ID3DX11Effect::IsValid</strong> should be called to verify whether or not the name exists.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476841</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetVariableByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetVariableBySemantic(System.String)">
            <summary>
            <p>Get a variable by semantic.</p>
            </summary>
            <param name = "semantic"><dd>  <p>The semantic name.</p> </dd></param>
            <returns><p>A reference to the effect variable indicated by the Semantic. See <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>Each effect variable can have a semantic attached, which is a user defined metadata string. Some  system-value semantics are reserved words that trigger built in functionality by pipeline stages.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> if a variable is not found; you can  call <strong>ID3DX11Effect::IsValid</strong> to verify whether or not the semantic exists.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476842</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableBySemantic([In] const char* Semantic)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetVariableBySemantic</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetGroupByIndex(System.Int32)">
            <summary>
            <p>Gets an effect group by index.</p>
            </summary>
            <param name = "index"><dd>  <p>Index of the effect group.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectGroup"/></strong> interface.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476836</doc-id>
            <unmanaged>ID3DX11EffectGroup* ID3DX11Effect::GetGroupByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetGroupByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetGroupByName(System.String)">
            <summary>
            <p>Gets an effect group by name.</p>
            </summary>
            <param name = "name"><dd>  <p>Name of the effect group.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectGroup"/></strong> interface.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476837</doc-id>
            <unmanaged>ID3DX11EffectGroup* ID3DX11Effect::GetGroupByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetGroupByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetTechniqueByIndex(System.Int32)">
            <summary>
            <p>Get a technique by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectTechnique"/></strong>.</p></returns>
            <remarks>
            <p>An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index. </p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476838</doc-id>
            <unmanaged>ID3DX11EffectTechnique* ID3DX11Effect::GetTechniqueByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetTechniqueByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetTechniqueByName(System.String)">
            <summary>
            <p>Get a technique by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The name of the technique.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectTechnique"/></strong>. If a technique with the appropriate name is not found an invalid technique is returned. <strong>ID3DX11EffectTechnique::IsValid</strong> should be called on the returned technique to determine whether it is valid.</p></returns>
            <remarks>
            <p>An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476839</doc-id>
            <unmanaged>ID3DX11EffectTechnique* ID3DX11Effect::GetTechniqueByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetTechniqueByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.GetClassLinkage">
            <summary>
            <p>Gets a class linkage interface.</p>
            </summary>
            <returns><p>Returns a reference to an <strong><see cref = "T:SharpDX.Direct3D11.ClassLinkage"/></strong> interface.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476831</doc-id>
            <unmanaged>ID3D11ClassLinkage* ID3DX11Effect::GetClassLinkage()</unmanaged>
            <unmanaged-short>ID3DX11Effect::GetClassLinkage</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.CloneEffect(System.Int32,SharpDX.Direct3D11.Effect@)">
            <summary>
            <p>Creates a copy of an effect interface.</p>
            </summary>
            <param name = "flags"><dd>  <p>Flags affecting the creation of the cloned effect. Can be 0 or one of the following values.</p> <table> <tr><th>Flag</th><th>Description</th></tr> <tr><td>D3DX11_EFFECT_CLONE_FORCE_NONSINGLE</td><td>Ignore all "single" qualifiers on cbuffers.  All cbuffers will have their own <strong><see cref = "T:SharpDX.Direct3D11.Buffer"/></strong>s created in the cloned effect.</td></tr> </table> <p>?</p> </dd></param>
            <param name = "clonedEffectOut"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.Effect"/></strong> reference that will be set to the copy of the effect.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476830</doc-id>
            <unmanaged>HRESULT ID3DX11Effect::CloneEffect([In] unsigned int Flags,[Out] ID3DX11Effect** ppClonedEffect)</unmanaged>
            <unmanaged-short>ID3DX11Effect::CloneEffect</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.Optimize">
            <summary>
            <p>Minimize the amount of memory required for an effect.</p>
            </summary>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect, and to store the metadata  required to reflect information back to an application using the API. You can minimize the amount of memory required by an effect by  calling <strong>ID3DX11Effect::Optimize</strong> which removes the reflection metadata from memory. API methods to read variables will no  longer work once reflection data has been removed.</p><p>The following methods will fail after Optimize has been called on an effect.</p><ul> <li> <strong>ID3DX11Effect::GetConstantBufferByIndex</strong> </li> <li> <strong>ID3DX11Effect::GetConstantBufferByName</strong> </li> <li> <strong>ID3DX11Effect::GetDesc</strong> </li> <li> <strong>ID3DX11Effect::GetDevice</strong> </li> <li> <strong>ID3DX11Effect::GetTechniqueByIndex</strong> </li> <li> <strong>ID3DX11Effect::GetTechniqueByName</strong> </li> <li> <strong>ID3DX11Effect::GetVariableByIndex</strong> </li> <li> <strong>ID3DX11Effect::GetVariableByName</strong> </li> <li> <strong>ID3DX11Effect::GetVariableBySemantic</strong> </li> </ul><strong>Note</strong>??References retrieved with these methods before calling <strong>ID3DX11Effect::Optimize</strong> are still valid  after <strong>ID3DX11Effect::Optimize</strong> is called.  This allows the application to get all the variables, techniques, and passes it will use,  call Optimize, and then use the effect.?<strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476845</doc-id>
            <unmanaged>HRESULT ID3DX11Effect::Optimize()</unmanaged>
            <unmanaged-short>ID3DX11Effect::Optimize</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.Effect.IsOptimized_">
            <summary>
            <p>Test an effect to see if the reflection metadata has been removed from memory.</p>
            </summary>
            <returns><p><strong>TRUE</strong> if the effect is optimized; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p></returns>
            <remarks>
            <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect,  and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by  an effect by calling <strong>ID3DX11Effect::Optimize</strong> which removes the reflection metadata from memory. Of course, API methods to read variables  will no longer work once reflection data has been removed.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476843</doc-id>
            <unmanaged>BOOL ID3DX11Effect::IsOptimized()</unmanaged>
            <unmanaged-short>ID3DX11Effect::IsOptimized</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectBlendVariable.GetBlendState">
            <summary>	
            Get a pointer to a blend-state interface.
            </summary>	
            <returns>Returns <see cref="T:SharpDX.Direct3D11.BlendState"/>.</returns>
            <unmanaged>HRESULT ID3D10EffectBlendVariable::GetBlendState([None] int Index,[Out] ID3D10BlendState** ppBlendState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectBlendVariable.GetBlendState(System.Int32,SharpDX.Direct3D11.BlendState@)">
            <summary>
            <p>Get a reference to a blend-state interface.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>
            <param name = "stateOut"><dd>  <p>The address of a reference to a blend-state interface (see <strong><see cref = "T:SharpDX.Direct3D11.BlendState"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476655</doc-id>
            <unmanaged>HRESULT ID3DX11EffectBlendVariable::GetBlendState([In] unsigned int Index,[Out] ID3D11BlendState** ppState)</unmanaged>
            <unmanaged-short>ID3DX11EffectBlendVariable::GetBlendState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectBlendVariable.SetBlendState(System.Int32,SharpDX.Direct3D11.BlendState)">
            <summary>
            <p>Sets an effect's blend-state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>
            <param name = "stateRef"><dd>  <p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.BlendState"/></strong> interface containing the blend-state to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476656</doc-id>
            <unmanaged>HRESULT ID3DX11EffectBlendVariable::SetBlendState([In] unsigned int Index,[In] ID3D11BlendState* pState)</unmanaged>
            <unmanaged-short>ID3DX11EffectBlendVariable::SetBlendState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectBlendVariable.UndoSetBlendState(System.Int32)">
            <summary>
            <p>Reverts a previously set blend-state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476657</doc-id>
            <unmanaged>HRESULT ID3DX11EffectBlendVariable::UndoSetBlendState([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectBlendVariable::UndoSetBlendState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectBlendVariable.GetBackingStore(System.Int32,SharpDX.Direct3D11.BlendStateDescription@)">
            <summary>
            <p>Get a reference to a blend-state variable.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of blend-state descriptions. If there is only one blend-state variable in the effect, use 0.</p> </dd></param>
            <param name = "descRef"><dd>  <p>A reference to a blend-state description (see <strong><see cref = "T:SharpDX.Direct3D11.BlendStateDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476654</doc-id>
            <unmanaged>HRESULT ID3DX11EffectBlendVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_BLEND_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectBlendVariable::GetBackingStore</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilVariable.GetDepthStencilState">
            <summary>	
            Get a pointer to a depth-stencil interface.	
            </summary>	
            <returns>Returns a pointer to a blend-state interface (see <see cref="T:SharpDX.Direct3D11.DepthStencilState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilVariable::GetDepthStencilState([None] int Index,[Out] ID3D10DepthStencilState** ppDepthStencilState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilVariable.GetDepthStencilState(System.Int32,SharpDX.Direct3D11.DepthStencilState@)">
            <summary>
            <p>Get a reference to a depth-stencil interface.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>
            <param name = "stateOut"><dd>  <p>The address of a reference to a blend-state interface (see <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilState"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476679</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::GetDepthStencilState([In] unsigned int Index,[Out] ID3D11DepthStencilState** ppState)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilVariable::GetDepthStencilState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilVariable.SetDepthStencilState(System.Int32,SharpDX.Direct3D11.DepthStencilState)">
            <summary>
            <p>Sets the depth stencil state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>
            <param name = "stateRef"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilState"/></strong> interface containing the new depth stencil state.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476680</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::SetDepthStencilState([In] unsigned int Index,[In] ID3D11DepthStencilState* pState)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilVariable::SetDepthStencilState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilVariable.UndoSetDepthStencilState(System.Int32)">
            <summary>
            <p>Reverts a previously set depth stencil state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476681</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::UndoSetDepthStencilState([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilVariable::UndoSetDepthStencilState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilVariable.GetBackingStore(System.Int32,SharpDX.Direct3D11.DepthStencilStateDescription@)">
            <summary>
            <p>Get a reference to a variable that contains depth-stencil state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of depth-stencil-state descriptions. If there is only one depth-stencil variable in the effect, use 0.</p> </dd></param>
            <param name = "descRef"><dd>  <p>A reference to a depth-stencil-state description (see <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilStateDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476678</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_DEPTH_STENCIL_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilVariable::GetBackingStore</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.SetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[])">
            <summary>	
            Set an array of depth-stencil-view resources.	
            </summary>	
            <param name="resourcesRef"> A pointer to an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.SetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[],System.Int32)">
            <summary>	
            Set an array of depth-stencil-view resources.	
            </summary>	
            <param name="resourcesRef"> A pointer to an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>. </param>
            <param name="offset"> The zero-based array index to set the first interface. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.GetDepthStencilArray(System.Int32)">
            <summary>	
            Get an array of depth-stencil-view resources.	
            </summary>	
            <param name="count"> The number of elements in the array. </param>
            <returns>Returns an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.GetDepthStencilArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of depth-stencil-view resources.	
            </summary>	
            <param name="offset"> The zero-based array index to get the first interface. </param>
            <param name="count"> The number of elements in the array. </param>
            <returns>Returns an array of depth-stencil-view interfaces. See <see cref="T:SharpDX.Direct3D11.DepthStencilView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D10DepthStencilView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.SetDepthStencil(SharpDX.Direct3D11.DepthStencilView)">
            <summary>
            <p>Set a depth-stencil-view resource.</p>
            </summary>
            <param name = "resourceRef"><dd>  <p>A reference to a depth-stencil-view interface. See <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476685</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencil([In] ID3D11DepthStencilView* pResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencil</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.GetDepthStencil">
            <summary>
            <p>Get a depth-stencil-view resource.</p>
            </summary>
            <returns><dd>  <p>The address of a reference to a depth-stencil-view interface. See <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476683</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::GetDepthStencil([Out] ID3D11DepthStencilView** ppResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::GetDepthStencil</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.SetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of depth-stencil-view resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476686</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.GetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of depth-stencil-view resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476684</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::GetDepthStencilArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.SetDepthStencilArray(SharpDX.ComArray{SharpDX.Direct3D11.DepthStencilView},System.Int32,System.Int32)">
            <summary>
            <p>Set an array of depth-stencil-view resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476686</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectDepthStencilViewVariable.SetDepthStencilArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <p>Set an array of depth-stencil-view resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476686</doc-id>
            <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrix``1(``0)">
            <summary>	
            Set a floating-point matrix.	
            </summary>	
            <param name="matrix"> A pointer to the first element in the matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrix([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrix``1">
            <summary>	
            Get a matrix.	
            </summary>	
            <returns><para>A reference to the first element in a matrix.</para></returns>	
            <remarks>	
            Note??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.	
            </remarks>	
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrix([Out] SHARPDX_MATRIX* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrix">
            <summary>	
            Get a matrix.	
            </summary>	
            <returns><para>A reference to the first element in a matrix.</para></returns>	
            <remarks>	
            Note??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.	
            </remarks>	
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrix([Out] SHARPDX_MATRIX* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrix``1(``0@)">
            <summary>	
            Set a floating-point matrix.	
            </summary>	
            <param name="matrix"> A pointer to the first element in the matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrix([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrix``1(``0[])">
            <summary>	
            Set an array of floating-point matrices.	
            </summary>	
            <param name="matrixArray"> A pointer to the first matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrixArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrix``1(``0[],System.Int32)">
            <summary>	
            Set an array of floating-point matrices.	
            </summary>	
            <param name="matrixArray"> A pointer to the first matrix. </param>
            <param name="offset"> The number of matrix elements to skip from the start of the array. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrixArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixArray``1(System.Int32)">
            <summary>	
            Get an array of matrices.	
            </summary>	
            <param name="count"> The number of matrices in the returned array. </param>
            <returns>Returns an array of matrix. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::GetMatrixArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixArray``1(System.Int32,System.Int32)">
            <summary>	
            Get an array of matrices.	
            </summary>	
            <param name="offset"> The offset (in number of matrices) between the start of the array and the first matrix returned. </param>
            <param name="count"> The number of matrices in the returned array. </param>
            <returns>Returns an array of matrix. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::GetMatrixArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixTranspose``1(``0)">
            <summary>	
            Transpose and set a floating-point matrix.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="matrix"> A pointer to the first element of a matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrixTranspose([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixTranspose``1(``0@)">
            <summary>	
            Transpose and set a floating-point matrix.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="matrix"> A pointer to the first element of a matrix. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrixTranspose([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixTranspose``1(``0[])">
            <summary>	
            Transpose and set an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="matrixArray"> A pointer to an array of matrices. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrixTransposeArray([In] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixTranspose``1(``0[],System.Int32)">
            <summary>	
            Transpose and set an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="matrixArray"> A pointer to an array of matrices. </param>
            <param name="offset"> The offset (in number of matrices) between the start of the array and the first matrix to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::SetMatrixTransposeArray([In] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixTranspose``1">
            <summary>	
            Transpose and get a floating-point matrix.	
            </summary>	
            <returns>The transposed matrix.</returns>	
            <remarks>	
            Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).Note??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.	
            </remarks>	
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTranspose([Out] SHARPDX_MATRIX* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixTranspose">
            <summary>	
            Transpose and get a floating-point matrix.	
            </summary>	
            <returns>The transposed matrix.</returns>	
            <remarks>	
            Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).Note??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.	
            </remarks>	
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTranspose([Out] SHARPDX_MATRIX* pData)</unmanaged>	
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixTransposeArray``1(System.Int32)">
            <summary>	
            Transpose and get an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="count"> The number of matrices in the array to get. </param>
            <returns>Returns an array of transposed <see cref="T:SharpDX.Mathematics.Interop.RawMatrix"/>. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixTransposeArray``1(System.Int32,System.Int32)">
            <summary>	
            Transpose and get an array of floating-point matrices.	
            </summary>	
            <remarks>	
             Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa). 	
            </remarks>	
            <param name="offset"> The offset (in number of matrices) between the start of the array and the first matrix to get. </param>
            <param name="count"> The number of matrices in the array to get. </param>
            <returns>Returns an array of transposed <see cref="T:SharpDX.Mathematics.Interop.RawMatrix"/>. </returns>
            <unmanaged>HRESULT ID3D11EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrix(SharpDX.Mathematics.Interop.RawMatrix@)">
            <summary>
            <p>Set a floating-point matrix.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first element in the matrix.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476702</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrix([In] const SHARPDX_MATRIX* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrix</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrix(SharpDX.Mathematics.Interop.RawMatrix@)">
            <summary>
            <p>Get a matrix.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first element in a matrix.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476698</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrix([Out] SHARPDX_MATRIX* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrix</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixArray(SharpDX.Mathematics.Interop.RawMatrix[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of floating-point matrices.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first matrix.</p> </dd></param>
            <param name = "offset"><dd>  <p>The number of matrix elements to skip from the start of the array.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476703</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixArray([In, Buffer] const SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixArray(SharpDX.Mathematics.Interop.RawMatrix[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of matrices.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first element of the first matrix in an array of matrices.</p> </dd></param>
            <param name = "offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix returned.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of matrices in the returned array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476699</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixArray([Out, Buffer] SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixPointerArray(System.Single[],System.Int32,System.Int32)">
            <summary>
            No documentation.
            </summary>
            <param name = "dataOut">No documentation.</param>
            <param name = "offset">No documentation.</param>
            <param name = "count">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixPointerArray([In, Buffer] const float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixPointerArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixPointerArray(System.Single[],System.Int32,System.Int32)">
            <summary>
            No documentation.
            </summary>
            <param name = "dataOut">No documentation.</param>
            <param name = "offset">No documentation.</param>
            <param name = "count">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixPointerArray([Out, Buffer] float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixPointerArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixTranspose(SharpDX.Mathematics.Interop.RawMatrix@)">
            <summary>
            <p>Transpose and set a floating-point matrix.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first element of a matrix.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476704</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTranspose([In] const SHARPDX_MATRIX* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTranspose</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixTranspose(SharpDX.Mathematics.Interop.RawMatrix@)">
            <summary>
            <p>Transpose and get a floating-point matrix.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first element of a transposed matrix.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476700</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTranspose([Out] SHARPDX_MATRIX* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTranspose</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixTransposeArray(SharpDX.Mathematics.Interop.RawMatrix[],System.Int32,System.Int32)">
            <summary>
            <p>Transpose and set an array of floating-point matrices.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to an array of matrices.</p> </dd></param>
            <param name = "offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix to set.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of matrices in the array to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476705</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTransposeArray([In, Buffer] const SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTransposeArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixTransposeArray(SharpDX.Mathematics.Interop.RawMatrix[],System.Int32,System.Int32)">
            <summary>
            <p>Transpose and get an array of floating-point matrices.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first element of an array of tranposed matrices.</p> </dd></param>
            <param name = "offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix to get.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of matrices in the array to get.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476701</doc-id>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTransposeArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.SetMatrixTransposePointerArray(System.Single[],System.Int32,System.Int32)">
            <summary>
            No documentation.
            </summary>
            <param name = "dataOut">No documentation.</param>
            <param name = "offset">No documentation.</param>
            <param name = "count">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTransposePointerArray([In, Buffer] const float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTransposePointerArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectMatrixVariable.GetMatrixTransposePointerArray(System.Single[],System.Int32,System.Int32)">
            <summary>
            No documentation.
            </summary>
            <param name = "dataOut">No documentation.</param>
            <param name = "offset">No documentation.</param>
            <param name = "count">No documentation.</param>
            <returns>No documentation.</returns>
            <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTransposePointerArray([Out, Buffer] float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTransposePointerArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.Apply(SharpDX.Direct3D11.DeviceContext)">
            <summary>	
            Set the state contained in a pass to the device.	
            </summary>	
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}.</returns>
            <unmanaged>HRESULT Apply([None] UINT Flags)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.Apply(SharpDX.Direct3D11.DeviceContext,System.Int32)">
            <summary>	
            Set the state contained in a pass to the device.	
            </summary>	
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}.</returns>
            <unmanaged>HRESULT Apply([None] UINT Flags)</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.IsValid">
            <summary>
            <p>Test a pass to see if it contains valid syntax.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476718</doc-id>
            <unmanaged>IsValid</unmanaged>
            <unmanaged-short>IsValid</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.Description">
            <summary>
            <p>Get a pass description.</p>
            </summary>
            <remarks>
            <p>A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures).  An effect technique contains one or more passes.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476712</doc-id>
            <unmanaged>GetDesc</unmanaged>
            <unmanaged-short>GetDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.VertexShaderDescription">
            <summary>
            <p>Get a vertex-shader description.</p>
            </summary>
            <remarks>
            <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476717</doc-id>
            <unmanaged>GetVertexShaderDesc</unmanaged>
            <unmanaged-short>GetVertexShaderDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.GeometryShaderDescription">
            <summary>
            <p>Get a geometry-shader description.</p>
            </summary>
            <remarks>
            <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476714</doc-id>
            <unmanaged>GetGeometryShaderDesc</unmanaged>
            <unmanaged-short>GetGeometryShaderDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.PixelShaderDescription">
            <summary>
            <p>Get a pixel-shader description.</p>
            </summary>
            <remarks>
            <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476716</doc-id>
            <unmanaged>GetPixelShaderDesc</unmanaged>
            <unmanaged-short>GetPixelShaderDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.HullShaderDescription">
            <summary>
            <p>Get hull-shader description.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476715</doc-id>
            <unmanaged>GetHullShaderDesc</unmanaged>
            <unmanaged-short>GetHullShaderDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.DomainShaderDescription">
            <summary>
            <p>Get a domain-shader description.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476713</doc-id>
            <unmanaged>GetDomainShaderDesc</unmanaged>
            <unmanaged-short>GetDomainShaderDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPass.ComputeShaderDescription">
            <summary>
            <p>Get a compute-shader description.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476711</doc-id>
            <unmanaged>GetComputeShaderDesc</unmanaged>
            <unmanaged-short>GetComputeShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.IsValid_">
            <summary>
            <p>Test a pass to see if it contains valid syntax.</p>
            </summary>
            <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476718</doc-id>
            <unmanaged>BOOL ID3DX11EffectPass::IsValid()</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::IsValid</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetDescription(SharpDX.Direct3D11.EffectPassDescription@)">
            <summary>
            <p>Get a pass description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a pass description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectPassDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures).  An effect technique contains one or more passes.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476712</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::GetDesc([Out] D3DX11_PASS_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetVertexShaderDescription(SharpDX.Direct3D11.EffectPassShaderDescription@)">
            <summary>
            <p>Get a vertex-shader description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a vertex-shader description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476717</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::GetVertexShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetVertexShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetGeometryShaderDescription(SharpDX.Direct3D11.EffectPassShaderDescription@)">
            <summary>
            <p>Get a geometry-shader description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a geometry-shader description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476714</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::GetGeometryShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetGeometryShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetPixelShaderDescription(SharpDX.Direct3D11.EffectPassShaderDescription@)">
            <summary>
            <p>Get a pixel-shader description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a pixel-shader description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>An effect pass can contain render state assignments and shader object assignments.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476716</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::GetPixelShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetPixelShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetHullShaderDescription(SharpDX.Direct3D11.EffectPassShaderDescription@)">
            <summary>
            <p>Get hull-shader description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a hull-shader description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476715</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::GetHullShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetHullShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetDomainShaderDescription(SharpDX.Direct3D11.EffectPassShaderDescription@)">
            <summary>
            <p>Get a domain-shader description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a domain-shader description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476713</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::GetDomainShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetDomainShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetComputeShaderDescription(SharpDX.Direct3D11.EffectPassShaderDescription@)">
            <summary>
            <p>Get a compute-shader description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a compute-shader description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476711</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::GetComputeShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetComputeShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetAnnotationByIndex(System.Int32)">
            <summary>
            <p>Get an annotation by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476709</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectPass::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetAnnotationByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.GetAnnotationByName(System.String)">
            <summary>
            <p>Get an annotation by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The name of the annotation.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476710</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectPass::GetAnnotationByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::GetAnnotationByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.Apply(System.Int32,SharpDX.Direct3D11.DeviceContext)">
            <summary>
            <p>Set the state contained in a pass to the device.</p>
            </summary>
            <param name = "flags"><dd>  <p>Unused.</p> </dd></param>
            <param name = "contextRef"><dd>  <p>The <strong><see cref = "T:SharpDX.Direct3D11.DeviceContext"/></strong> to apply the pass to.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476707</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::Apply([In] unsigned int Flags,[In] ID3D11DeviceContext* pContext)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::Apply</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectPass.ComputeStateBlockMask(SharpDX.Direct3D11.StateBlockMask@)">
            <summary>
            <p>Generate a mask for allowing/preventing state changes.</p>
            </summary>
            <param name = "stateBlockMaskRef"><dd>  <p>A reference to a state-block mask (see <strong><see cref = "T:SharpDX.Direct3D11.StateBlockMask"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476708</doc-id>
            <unmanaged>HRESULT ID3DX11EffectPass::ComputeStateBlockMask([InOut] D3DX11_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>
            <unmanaged-short>ID3DX11EffectPass::ComputeStateBlockMask</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectPassDescription">
            <summary>
            <p>Describes an effect pass, which contains pipeline state.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectPassDescription"/> is used with <strong>ID3DX11EffectPass::GetDesc</strong>.</p>
            </remarks>
            <doc-id>ff476319</doc-id>
            <unmanaged>D3DX11_PASS_DESC</unmanaged>
            <unmanaged-short>D3DX11_PASS_DESC</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPassDescription.Signature">
            <summary>
            Returns the signature of this Effect pass.
            </summary>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPassDescription.HasSignature">
            <summary>
            Returns true if this Effect pass has a Signature (eg: if a VertexShader or Geometry Shader is present), false otherwise
            </summary>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassDescription.Name">
            <summary>
            <dd> <p>Name of this pass (<strong><c>null</c></strong> if not anonymous).</p> </dd>
            </summary>
            <doc-id>ff476319</doc-id>
            <unmanaged>Name</unmanaged>
            <unmanaged-short>Name</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassDescription.AnnotationCount">
            <summary>
            <dd> <p>Number of annotations on this pass.</p> </dd>
            </summary>
            <doc-id>ff476319</doc-id>
            <unmanaged>Annotations</unmanaged>
            <unmanaged-short>Annotations</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassDescription.PIAInputSignature">
            <summary>
            <dd> <p>Signature from the vertex shader or geometry shader (if there is no vertex shader) or <strong><c>null</c></strong> if neither exists.</p> </dd>
            </summary>
            <doc-id>ff476319</doc-id>
            <unmanaged>pIAInputSignature</unmanaged>
            <unmanaged-short>pIAInputSignature</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassDescription.IAInputSignatureSize">
            <summary>
            <dd> <p>Singature size in bytes.</p> </dd>
            </summary>
            <doc-id>ff476319</doc-id>
            <unmanaged>IAInputSignatureSize</unmanaged>
            <unmanaged-short>IAInputSignatureSize</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassDescription.StencilReference">
            <summary>
            <dd> <p>The stencil-reference value used in the depth-stencil state.</p> </dd>
            </summary>
            <doc-id>ff476319</doc-id>
            <unmanaged>StencilRef</unmanaged>
            <unmanaged-short>StencilRef</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassDescription.SampleMask">
            <summary>
            <dd> <p>The sample mask for the blend state.</p> </dd>
            </summary>
            <doc-id>ff476319</doc-id>
            <unmanaged>SampleMask</unmanaged>
            <unmanaged-short>SampleMask</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassDescription.BlendFactor">
            <summary>
            <dd> <p>The per-component blend factors (RGBA) for the blend state.</p> </dd>
            </summary>
            <doc-id>ff476319</doc-id>
            <unmanaged>BlendFactor</unmanaged>
            <unmanaged-short>BlendFactor</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectPassShaderDescription">
            <summary>
            <p>Describes an effect pass.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectPassShaderDescription"/> is used with <strong><see cref = "T:SharpDX.Direct3D11.EffectPass"/></strong> Get*ShaderDesc methods.</p><p>If this is an inline shader assignment, the returned interface will be an anonymous shader variable, which is not retrievable any other way.   It's name in the variable description will be "$Anonymous". If there is no assignment of this type in the pass block, pShaderVariable != <strong><c>null</c></strong>,  but pShaderVariable-&gt;IsValid() == <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p>
            </remarks>
            <doc-id>ff476320</doc-id>
            <unmanaged>D3DX11_PASS_SHADER_DESC</unmanaged>
            <unmanaged-short>D3DX11_PASS_SHADER_DESC</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectPassShaderDescription.Variable">
            <summary>	
            A reference to the variable that the shader came from. If it is an inline shader assignment, the returned interface will be an anonymous shader variable, which is not retrievable any other way.  Its name in the variable description will be "$Anonymous". If there is no assignment of this type in the pass block, this will point to a shader variable that returns false when IsValid is called. 	
            </summary>	
            <unmanaged>ID3D10EffectShaderVariable* pShaderVariable</unmanaged>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassShaderDescription.VariablePointer">
            <summary>
            <dd> <p>The variable that this shader came from.</p> </dd>
            </summary>
            <doc-id>ff476320</doc-id>
            <unmanaged>pShaderVariable</unmanaged>
            <unmanaged-short>pShaderVariable</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectPassShaderDescription.Index">
            <summary>
            <dd> <p>The element of pShaderVariable (if an array) or 0 if not applicable.</p> </dd>
            </summary>
            <doc-id>ff476320</doc-id>
            <unmanaged>ShaderIndex</unmanaged>
            <unmanaged-short>ShaderIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRasterizerVariable.GetRasterizerState">
            <summary>	
            Get a pointer to a rasterizer interface.	
            </summary>	
            <returns>Returns a pointer to a rasterizer interface (see <see cref="T:SharpDX.Direct3D11.RasterizerState"/>). </returns>
            <unmanaged>HRESULT ID3D10EffectRasterizerVariable::GetRasterizerState([None] int Index,[Out] ID3D10RasterizerState** ppRasterizerState)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRasterizerVariable.GetRasterizerState(System.Int32,SharpDX.Direct3D11.RasterizerState@)">
            <summary>
            <p>Get a reference to a rasterizer interface.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0.</p> </dd></param>
            <param name = "stateOut"><dd>  <p>The address of a reference to a rasterizer interface (see <strong><see cref = "T:SharpDX.Direct3D11.RasterizerState"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476721</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::GetRasterizerState([In] unsigned int Index,[Out] ID3D11RasterizerState** ppState)</unmanaged>
            <unmanaged-short>ID3DX11EffectRasterizerVariable::GetRasterizerState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRasterizerVariable.SetRasterizerState(System.Int32,SharpDX.Direct3D11.RasterizerState)">
            <summary>
            <p>Sets the rasterizer state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0. </p> </dd></param>
            <param name = "stateRef"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.RasterizerState"/></strong> interface.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476722</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::SetRasterizerState([In] unsigned int Index,[In] ID3D11RasterizerState* pState)</unmanaged>
            <unmanaged-short>ID3DX11EffectRasterizerVariable::SetRasterizerState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRasterizerVariable.UndoSetRasterizerState(System.Int32)">
            <summary>
            <p>Reverts a previously set rasterizer state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0. </p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476723</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::UndoSetRasterizerState([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectRasterizerVariable::UndoSetRasterizerState</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRasterizerVariable.GetBackingStore(System.Int32,SharpDX.Direct3D11.RasterizerStateDescription@)">
            <summary>
            <p>Get a reference to a variable that contains rasteriser state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of rasteriser-state descriptions. If there is only one rasteriser variable in the effect, use 0.</p> </dd></param>
            <param name = "descRef"><dd>  <p>A reference to a rasteriser-state description (see <strong><see cref = "T:SharpDX.Direct3D11.RasterizerStateDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476720</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_RASTERIZER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectRasterizerVariable::GetBackingStore</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.SetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[])">
            <summary>	
            Set an array of render-targets.	
            </summary>	
            <param name="resourcesRef">Set an array of render-target-view interfaces. See <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.SetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[],System.Int32)">
            <summary>	
            Set an array of render-targets.	
            </summary>	
            <param name="resourcesRef">Set an array of render-target-view interfaces. See <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>. </param>
            <param name="offset">The zero-based array index to store the first interface. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.GetRenderTargetArray(System.Int32)">
            <summary>	
            Get an array of render-targets.	
            </summary>	
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.GetRenderTargetArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of render-targets.	
            </summary>	
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of <see cref="T:SharpDX.Direct3D11.RenderTargetView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D10RenderTargetView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.SetRenderTarget(SharpDX.Direct3D11.RenderTargetView)">
            <summary>
            <p>Set a render-target.</p>
            </summary>
            <param name = "resourceRef"><dd>  <p>A reference to a render-target-view interface. See <strong><see cref = "T:SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476727</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTarget([In] ID3D11RenderTargetView* pResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTarget</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.GetRenderTarget">
            <summary>
            <p>Get a render-target.</p>
            </summary>
            <returns><dd>  <p>The address of a reference to a render-target-view interface. See <strong><see cref = "T:SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476725</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::GetRenderTarget([Out] ID3D11RenderTargetView** ppResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::GetRenderTarget</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.SetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of render-targets.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476728</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.GetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of render-targets.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>A reference to an array of render-target-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476726</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::GetRenderTargetArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.SetRenderTargetArray(SharpDX.ComArray{SharpDX.Direct3D11.RenderTargetView},System.Int32,System.Int32)">
            <summary>
            <p>Set an array of render-targets.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476728</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectRenderTargetViewVariable.SetRenderTargetArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <p>Set an array of render-targets.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476728</doc-id>
            <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectSamplerVariable.GetSampler">
            <summary>	
            Get a reference to a sampler interface.	
            </summary>	
            <returns>Returns a reference to a sampler interface (see <see cref="T:SharpDX.Direct3D11.SamplerState"/>).  </returns>
            <unmanaged>HRESULT ID3D10EffectSamplerVariable::GetSampler([None] int Index,[Out] ID3D10SamplerState** ppSampler)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectSamplerVariable.GetSampler(System.Int32)">
            <summary>
            <p>Get a reference to a sampler interface.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0.</p> </dd></param>
            <returns><dd>  <p>The address of a reference to a sampler interface (see <strong><see cref = "T:SharpDX.Direct3D11.SamplerState"/></strong>).</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476731</doc-id>
            <unmanaged>HRESULT ID3DX11EffectSamplerVariable::GetSampler([In] unsigned int Index,[Out] ID3D11SamplerState** ppSampler)</unmanaged>
            <unmanaged-short>ID3DX11EffectSamplerVariable::GetSampler</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectSamplerVariable.SetSampler(System.Int32,SharpDX.Direct3D11.SamplerState)">
            <summary>
            <p>Set sampler state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0. </p> </dd></param>
            <param name = "samplerRef"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.SamplerState"/></strong> interface containing the sampler state.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476732</doc-id>
            <unmanaged>HRESULT ID3DX11EffectSamplerVariable::SetSampler([In] unsigned int Index,[In] ID3D11SamplerState* pSampler)</unmanaged>
            <unmanaged-short>ID3DX11EffectSamplerVariable::SetSampler</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectSamplerVariable.UndoSetSampler(System.Int32)">
            <summary>
            <p>Revert a previously set sampler state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0. </p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476733</doc-id>
            <unmanaged>HRESULT ID3DX11EffectSamplerVariable::UndoSetSampler([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectSamplerVariable::UndoSetSampler</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectSamplerVariable.GetBackingStore(System.Int32,SharpDX.Direct3D11.SamplerStateDescription@)">
            <summary>
            <p>Get a reference to a variable that contains sampler state.</p>
            </summary>
            <param name = "index"><dd>  <p>Index into an array of sampler descriptions. If there is only one sampler variable in the effect, use 0.</p> </dd></param>
            <param name = "descRef"><dd>  <p>A reference to a sampler description (see <strong><see cref = "T:SharpDX.Direct3D11.SamplerStateDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476730</doc-id>
            <unmanaged>HRESULT ID3DX11EffectSamplerVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_SAMPLER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectSamplerVariable::GetBackingStore</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Single)">
            <summary>	
            Set a floating-point variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloat([None] float Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Single[])">
            <summary>	
            Set an array of floating-point variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloatArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Single[],System.Int32)">
            <summary>	
            Set an array of floating-point variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetFloatArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetFloatArray(System.Int32)">
            <summary>	
            Get an array of floating-point variables.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of floats. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetFloatArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of floating-point variables.	
            </summary>	
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of floats. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.UInt32)">
            <summary>	
            Set an unsigned integer variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetInt([None] int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.UInt32[])">
            <summary>	
            Set an array of unsigned integer variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetIntArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Int32)">
            <summary>	
            Set an integer variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetInt([None] int Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Int32[])">
            <summary>	
            Set an array of integer variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetIntArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Int32[],System.Int32)">
            <summary>	
            Set an array of integer variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetIntArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetIntArray(System.Int32)">
            <summary>	
            Get an array of integer variables.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of integer variables. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetIntArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of integer variables.	
            </summary>	
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of integer variables. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Boolean)">
            <summary>	
            Set a boolean variable.	
            </summary>	
            <param name="value">A reference to the variable. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBool([None] BOOL Value)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetBool">
            <summary>	
            Get a boolean variable.	
            </summary>	
            <returns>Returns a boolean. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetBool([Out] BOOL* pValue)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Boolean[])">
            <summary>	
            Set an array of boolean variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBoolArray([In, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.Set(System.Boolean[],System.Int32)">
            <summary>	
            Set an array of boolean variables.	
            </summary>	
            <param name="dataRef">A reference to the start of the data to set. </param>
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::SetBoolArray([In, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetBoolArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of boolean variables.	
            </summary>	
            <param name="offset">Must be set to 0; this is reserved for future use.  </param>
            <param name="count">The number of array elements to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectScalarVariable::GetBoolArray([Out, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.SetFloat(System.Single)">
            <summary>
            <p>Set a floating-point variable.</p>
            </summary>
            <param name = "value"><dd>  <p>A reference to the variable.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476743</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetFloat([In] const float Value)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::SetFloat</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetFloat">
            <summary>
            <p>Get a floating-point variable.</p>
            </summary>
            <returns><dd>  <p>A reference to the variable.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476737</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetFloat([Out] float* pValue)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::GetFloat</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.SetFloatArray(System.Single[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of floating-point variables.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476744</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetFloatArray([In, Buffer] const float* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::SetFloatArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetFloatArray(System.Single[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of floating-point variables.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476738</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::GetFloatArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.SetInt(System.Int32)">
            <summary>
            <p>Set an integer variable.</p>
            </summary>
            <param name = "value"><dd>  <p>A reference to the variable.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476745</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetInt([In] const int Value)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::SetInt</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetInt">
            <summary>
            <p>Get an integer variable.</p>
            </summary>
            <returns><dd>  <p>A reference to the variable.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476739</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetInt([Out] int* pValue)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::GetInt</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.SetIntArray(System.Int32[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of integer variables.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476746</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetIntArray([In, Buffer] const int* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::SetIntArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetIntArray(System.Int32[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of integer variables.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476740</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::GetIntArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.SetBool(SharpDX.Mathematics.Interop.RawBool)">
            <summary>
            <p>Set a boolean variable.</p>
            </summary>
            <param name = "value"><dd>  <p>A reference to the variable.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476741</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetBool([In] const BOOL Value)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::SetBool</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetBool(SharpDX.Mathematics.Interop.RawBool@)">
            <summary>
            <p>Get a boolean variable.</p>
            </summary>
            <param name = "valueRef"><dd>  <p>A reference to the variable.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476735</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetBool([Out] BOOL* pValue)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::GetBool</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.SetBoolArray(SharpDX.Mathematics.Interop.RawBool[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of boolean variables.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476742</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetBoolArray([In, Buffer] const BOOL* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::SetBoolArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectScalarVariable.GetBoolArray(SharpDX.Mathematics.Interop.RawBool[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of boolean variables.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476736</doc-id>
            <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetBoolArray([Out, Buffer] BOOL* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectScalarVariable::GetBoolArray</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectShaderDescription">
            <summary>
            <p>Describes an effect shader.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectShaderDescription"/> is used with <strong>ID3DX11EffectShaderVariable::GetShaderDesc</strong>.</p>
            </remarks>
            <doc-id>ff476304</doc-id>
            <unmanaged>D3DX11_EFFECT_SHADER_DESC</unmanaged>
            <unmanaged-short>D3DX11_EFFECT_SHADER_DESC</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectShaderDescription.Signature">
            <summary>
            Gets the signature passed into InputLayout. Only valid on a vertex shader or geometry shader.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectShaderDescription.Bytecode">
            <summary>
            Gets the bytecode from the compiled shader.
            </summary>
            <value>The bytecode.</value>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.InputSignaturePointer">
            <summary>
            <dd> <p>Passed into CreateInputLayout. Only valid on a vertex shader or geometry shader. See <strong>ID3D11Device::CreateInputLayout</strong>.</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>pInputSignature</unmanaged>
            <unmanaged-short>pInputSignature</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.IsInline">
            <summary>
            <dd> <p><strong>TRUE</strong> is the shader is defined inline; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>IsInline</unmanaged>
            <unmanaged-short>IsInline</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.BytecodePointer">
            <summary>
            <dd> <p>Shader bytecode.</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>pBytecode</unmanaged>
            <unmanaged-short>pBytecode</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.BytecodeLength">
            <summary>
            <dd> <p>The length of pBytecode. </p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>BytecodeLength</unmanaged>
            <unmanaged-short>BytecodeLength</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectShaderDescription.SODecls">
            <summary>
            <dd> <p>Stream out declaration string (for geometry shader with SO).</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>SODecls</unmanaged>
            <unmanaged-short>SODecls</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.RasterizedStream">
            <summary>
            <dd> <p>Indicates which stream is rasterized.  D3D11 geometry shaders can output up to four streams of data, one of which can be rasterized.</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>RasterizedStream</unmanaged>
            <unmanaged-short>RasterizedStream</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.InputParameterCount">
            <summary>
            <dd> <p>Number of entries in the input signature.</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>NumInputSignatureEntries</unmanaged>
            <unmanaged-short>NumInputSignatureEntries</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.OutputParameterCount">
            <summary>
            <dd> <p>Number of entries in the output signature.</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>NumOutputSignatureEntries</unmanaged>
            <unmanaged-short>NumOutputSignatureEntries</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectShaderDescription.PatchConstantSignatureEntrieCount">
            <summary>
            <dd> <p>Number of entries in the patch constant signature.</p> </dd>
            </summary>
            <doc-id>ff476304</doc-id>
            <unmanaged>NumPatchConstantSignatureEntries</unmanaged>
            <unmanaged-short>NumPatchConstantSignatureEntries</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.SetResourceArray(SharpDX.Direct3D11.ShaderResourceView[])">
            <summary>	
            Set an array of shader resources.	
            </summary>	
            <param name="resourcesRef">The address of an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::SetResourceArray([None] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.SetResourceArray(SharpDX.Direct3D11.ShaderResourceView[],System.Int32)">
            <summary>	
            Set an array of shader resources.	
            </summary>	
            <param name="resourcesRef">The address of an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>. </param>
            <param name="offset">The zero-based array index to get the first interface. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::SetResourceArray([None] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.GetResourceArray(System.Int32)">
            <summary>	
            Get an array of shader resources.	
            </summary>	
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::GetResourceArray([Out] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.GetResourceArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of shader resources.	
            </summary>	
            <param name="offset">The zero-based array index to get the first interface. </param>
            <param name="count">The number of elements in the array. </param>
            <returns>Returns an array of shader-resource-view interfaces. See <see cref="T:SharpDX.Direct3D11.ShaderResourceView"/>. </returns>
            <unmanaged>HRESULT ID3D10EffectShaderResourceVariable::GetResourceArray([Out] ID3D10ShaderResourceView** ppResources,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.SetResource(SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            <p>Set a shader resource.</p>
            </summary>
            <param name = "resourceRef"><dd>  <p>The address of a reference to a shader-resource-view interface. See <strong><see cref = "T:SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476750</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResource([In] ID3D11ShaderResourceView* pResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResource</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.GetResource">
            <summary>
            <p>Get a shader resource.</p>
            </summary>
            <returns><dd>  <p>The address of a reference to a shader-resource-view interface. See <strong><see cref = "T:SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476748</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::GetResource([Out] ID3D11ShaderResourceView** ppResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderResourceVariable::GetResource</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.SetResourceArray(SharpDX.Direct3D11.ShaderResourceView[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of shader resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476751</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.GetResourceArray(SharpDX.Direct3D11.ShaderResourceView[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of shader resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476749</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::GetResourceArray([Out, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderResourceVariable::GetResourceArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.SetResourceArray(SharpDX.ComArray{SharpDX.Direct3D11.ShaderResourceView},System.Int32,System.Int32)">
            <summary>
            <p>Set an array of shader resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476751</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderResourceVariable.SetResourceArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <p>Set an array of shader resources.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref = "T:SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>
            <param name = "offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476751</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectStringVariable.GetString">
            <summary>	
            Get the string.	
            </summary>	
            <returns>Returns a reference to the string.</returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetString([Out] const char** ppString)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectStringVariable.GetStringArray(System.Int32)">
            <summary>	
            Get an array of strings.	
            </summary>	
            <param name="count">The number of strings in the returned array. </param>
            <returns>Returns a reference to the first string in the array.</returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetStringArray([Out, Buffer] const char** ppStrings,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectStringVariable.GetStringArray(System.Int32,System.Int32)">
            <summary>	
            Get an array of strings.	
            </summary>	
            <param name="offset">The offset (in number of strings) between the start of the array and the first string to get. </param>
            <param name="count">The number of strings in the returned array. </param>
            <returns>Returns a reference to the first string in the array.</returns>
            <unmanaged>HRESULT ID3D10EffectStringVariable::GetStringArray([Out, Buffer] const char** ppStrings,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectStringVariable.GetString(System.IntPtr@)">
            <summary>
            <p>Get the string.</p>
            </summary>
            <param name = "stringOut"><dd>  <p>A reference to the string.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476764</doc-id>
            <unmanaged>HRESULT ID3DX11EffectStringVariable::GetString([Out] const char** ppString)</unmanaged>
            <unmanaged-short>ID3DX11EffectStringVariable::GetString</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectStringVariable.GetStringArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <p>Get an array of strings.</p>
            </summary>
            <param name = "stringsOut"><dd>  <p>A reference to the first string in the array.</p> </dd></param>
            <param name = "offset"><dd>  <p>The offset (in number of strings) between the start of the array and the first string to get.</p> </dd></param>
            <param name = "count"><dd>  <p>The number of strings in the returned array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476765</doc-id>
            <unmanaged>HRESULT ID3DX11EffectStringVariable::GetStringArray([Out, Buffer] const char** ppStrings,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectStringVariable::GetStringArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(SharpDX.Direct3D11.UnorderedAccessView[])">
            <summary>
            Sets the specified view.
            </summary>
            <param name="view">The view.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(SharpDX.Direct3D11.UnorderedAccessView[],System.Int32)">
            <summary>
            Sets the specified data ref.
            </summary>
            <param name="dataRef">The data ref.</param>
            <param name="offset">The offset.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(SharpDX.ComArray{SharpDX.Direct3D11.UnorderedAccessView})">
            <summary>
            Sets the specified data ref.
            </summary>
            <param name="dataRef">The data ref.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(SharpDX.ComArray{SharpDX.Direct3D11.UnorderedAccessView},System.Int32)">
            <summary>
            Sets the specified data ref.
            </summary>
            <param name="dataRef">The data ref.</param>
            <param name="offset">The offset.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.GetUnorderedAccessViewArray(System.Int32)">
            <summary>
            Gets the unordered access view array.
            </summary>
            <param name="count">The count.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray([Out, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.GetUnorderedAccessViewArray(System.Int32,System.Int32)">
            <summary>
            Gets the unordered access view array.
            </summary>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>A <see cref = "T:SharpDX.Result" /> object describing the result of the operation.</returns>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray([Out, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(SharpDX.Direct3D11.UnorderedAccessView)">
            <summary>
            <p>Set an unordered-access-view.</p>
            </summary>
            <param name = "resourceRef"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.UnorderedAccessView"/></strong>.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476786</doc-id>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessView([In] ID3D11UnorderedAccessView* pResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessView</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.GetUnorderedAccessView">
            <summary>
            <p>Get an unordered-access-view.</p>
            </summary>
            <returns><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.UnorderedAccessView"/></strong> reference that will be set on return.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476784</doc-id>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessView([Out] ID3D11UnorderedAccessView** ppResource)</unmanaged>
            <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessView</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(SharpDX.Direct3D11.UnorderedAccessView[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of unordered-access-views.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>An array of <strong><see cref = "T:SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>
            <param name = "offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>
            <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476787</doc-id>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.GetUnorderedAccessViewArray(SharpDX.Direct3D11.UnorderedAccessView[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of unordered-access-views.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.UnorderedAccessView"/></strong> reference that will be set to the UAV array on return. </p> </dd></param>
            <param name = "offset"><dd>  <p>Index of the first interface.</p> </dd></param>
            <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476785</doc-id>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray([Out, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(SharpDX.ComArray{SharpDX.Direct3D11.UnorderedAccessView},System.Int32,System.Int32)">
            <summary>
            <p>Set an array of unordered-access-views.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>An array of <strong><see cref = "T:SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>
            <param name = "offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>
            <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476787</doc-id>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable.Set(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <p>Set an array of unordered-access-views.</p>
            </summary>
            <param name = "resourcesOut"><dd>  <p>An array of <strong><see cref = "T:SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>
            <param name = "offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>
            <param name = "count"><dd>  <p>Number of elements in the array.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476787</doc-id>
            <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.SetRawValue(SharpDX.DataStream,System.Int32)">
            <summary>
            Set data.
            </summary>
            <param name="data">A reference to the variable.</param>
            <param name="count">size in bytes of data to write.</param>
            <returns>
            Returns one of the following {{Direct3D 10 Return Codes}}.
            </returns>
            <remarks>
            This method does no conversion or type checking; it is therefore a very quick way to access array items.
            </remarks>
            <unmanaged>HRESULT ID3D11EffectVariable::SetRawValue([None] void* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetRawValue(System.Int32)">
            <summary>	
            Get data.	
            </summary>	
            <remarks>	
            This method does no conversion or type checking; it is therefore a very quick way to access array items. 	
            </remarks>	
            <param name="count">The number of bytes to get. </param>
            <returns>Returns a <see cref="T:SharpDX.DataStream"/> filled with the value. </returns>
            <unmanaged>HRESULT ID3D11EffectVariable::GetRawValue([None] void* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsScalar">
            <summary>	
            Get a scalar variable.	
            </summary>	
            <remarks>	
            AsScalar returns a version of the effect variable that has been specialized to a scalar variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain scalar data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a scalar variable. See <see cref="T:SharpDX.Direct3D11.EffectScalarVariable"/>. </returns>
            <unmanaged>ID3D11EffectScalarVariable* ID3D11EffectVariable::AsScalar()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsVector">
            <summary>	
            Get a vector variable.	
            </summary>	
            <remarks>	
            AsVector returns a version of the effect variable that has been specialized to a vector variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain vector data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a vector variable. See <see cref="T:SharpDX.Direct3D11.EffectVectorVariable"/>. </returns>
            <unmanaged>ID3D11EffectVectorVariable* ID3D11EffectVariable::AsVector()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsMatrix">
            <summary>	
            Get a matrix variable.	
            </summary>	
            <remarks>	
            AsMatrix returns a version of the effect variable that has been specialized to a matrix variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain matrix data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a matrix variable. See <see cref="T:SharpDX.Direct3D11.EffectMatrixVariable"/>. </returns>
            <unmanaged>ID3D11EffectMatrixVariable* ID3D11EffectVariable::AsMatrix()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsString">
            <summary>	
            Get a string variable.	
            </summary>	
            <remarks>	
            AsString returns a version of the effect variable that has been specialized to a string variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain string data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a string variable. See <see cref="T:SharpDX.Direct3D11.EffectStringVariable"/>. </returns>
            <unmanaged>ID3D11EffectStringVariable* ID3D11EffectVariable::AsString()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsShaderResource">
            <summary>	
            Get a shader-resource variable.	
            </summary>	
            <remarks>	
            AsShaderResource returns a version of the effect variable that has been specialized to a shader-resource variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader-resource data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a shader-resource variable. See <see cref="T:SharpDX.Direct3D11.EffectShaderResourceVariable"/>. </returns>
            <unmanaged>ID3D11EffectShaderResourceVariable* ID3D11EffectVariable::AsShaderResource()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsRenderTargetView">
            <summary>	
            Get a render-target-view variable.	
            </summary>	
            <remarks>	
            This method returns a version of the effect variable that has been specialized to a render-target-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain render-target-view data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a render-target-view variable. See <see cref="T:SharpDX.Direct3D11.EffectRenderTargetViewVariable"/>. </returns>
            <unmanaged>ID3D11EffectRenderTargetViewVariable* ID3D11EffectVariable::AsRenderTargetView()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsDepthStencilView">
            <summary>	
            Get a depth-stencil-view variable.	
            </summary>	
            <remarks>	
            This method returns a version of the effect variable that has been specialized to a depth-stencil-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil-view data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a depth-stencil-view variable. See <see cref="T:SharpDX.Direct3D11.EffectDepthStencilViewVariable"/>. </returns>
            <unmanaged>ID3D11EffectDepthStencilViewVariable* ID3D11EffectVariable::AsDepthStencilView()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsClassInstance">
            <summary>	
            Get a class instance variable.
            </summary>	
            <returns>A reference to a <see cref="T:SharpDX.Direct3D11.EffectClassInstanceVariable"/>. </returns>
            <unmanaged>ID3D11EffectClassInstanceVariable* ID3D11EffectVariable::AsClassInstance()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsInterface">
            <summary>	
            Get an interface variable.
            </summary>	
            <returns>A reference to a <see cref="T:SharpDX.Direct3D11.EffectInterfaceVariable"/>. </returns>
            <unmanaged>ID3D11EffectClassInstanceVariable* ID3D11EffectVariable::AsInterface()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsUnorderedAccessView">
            <summary>	
            Get an unordered access view variable.
            </summary>	
            <returns>A reference to a <see cref="T:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable"/>. </returns>
            <unmanaged>ID3D11EffectUnorderedAccessViewVariable* ID3D11EffectVariable::AsDepthStencilView()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsConstantBuffer">
            <summary>	
            Get a constant buffer.	
            </summary>	
            <remarks>	
            AsConstantBuffer returns a version of the effect variable that has been specialized to a constant buffer. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain constant buffer data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a constant buffer. See <see cref="T:SharpDX.Direct3D11.EffectConstantBuffer"/>. </returns>
            <unmanaged>ID3D11EffectConstantBuffer* ID3D11EffectVariable::AsConstantBuffer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsShader">
            <summary>	
            Get a shader variable.	
            </summary>	
            <remarks>	
            AsShader returns a version of the effect variable that has been specialized to a shader variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a shader variable. See <see cref="T:SharpDX.Direct3D11.EffectShaderVariable"/>. </returns>
            <unmanaged>ID3D11EffectShaderVariable* ID3D11EffectVariable::AsShader()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsBlend">
            <summary>	
            Get a effect-blend variable.	
            </summary>	
            <remarks>	
            AsBlend returns a version of the effect variable that has been specialized to an effect-blend variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain effect-blend data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to an effect blend variable. See <see cref="T:SharpDX.Direct3D11.EffectBlendVariable"/>. </returns>
            <unmanaged>ID3D11EffectBlendVariable* ID3D11EffectVariable::AsBlend()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsDepthStencil">
            <summary>	
            Get a depth-stencil variable.	
            </summary>	
            <remarks>	
            AsDepthStencil returns a version of the effect variable that has been specialized to a depth-stencil variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a depth-stencil variable. See <see cref="T:SharpDX.Direct3D11.EffectDepthStencilVariable"/>. </returns>
            <unmanaged>ID3D11EffectDepthStencilVariable* ID3D11EffectVariable::AsDepthStencil()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsRasterizer">
            <summary>	
            Get a rasterizer variable.	
            </summary>	
            <remarks>	
            AsRasterizer returns a version of the effect variable that has been specialized to a rasterizer variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain rasterizer data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a rasterizer variable. See <see cref="T:SharpDX.Direct3D11.EffectRasterizerVariable"/>. </returns>
            <unmanaged>ID3D11EffectRasterizerVariable* ID3D11EffectVariable::AsRasterizer()</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsSampler">
            <summary>	
            Get a sampler variable.	
            </summary>	
            <remarks>	
            AsSampler returns a version of the effect variable that has been specialized to a sampler variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain sampler data. Applications can test the returned object for validity by calling {{IsValid}}. 	
            </remarks>	
            <returns>A reference to a sampler variable. See <see cref="T:SharpDX.Direct3D11.EffectSamplerVariable"/>. </returns>
            <unmanaged>ID3D11EffectSamplerVariable* ID3D11EffectVariable::AsSampler()</unmanaged>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectVariable.IsValid">
            <summary>
            <p>Compare the data type with the data stored.</p>
            </summary>
            <remarks>
            <p>This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476815</doc-id>
            <unmanaged>IsValid</unmanaged>
            <unmanaged-short>IsValid</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectVariable.TypeInfo">
            <summary>
            <p>Get type information.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476814</doc-id>
            <unmanaged>GetType</unmanaged>
            <unmanaged-short>GetType</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectVariable.Description">
            <summary>
            <p>Get a description.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476807</doc-id>
            <unmanaged>GetDesc</unmanaged>
            <unmanaged-short>GetDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectVariable.ParentConstantBuffer">
            <summary>
            <p>Get a constant buffer.</p>
            </summary>
            <remarks>
            <p>Effect variables are read-from or written-to a constant buffer.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476812</doc-id>
            <unmanaged>GetParentConstantBuffer</unmanaged>
            <unmanaged-short>GetParentConstantBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.IsValid_">
            <summary>
            <p>Compare the data type with the data stored.</p>
            </summary>
            <returns><p><strong>TRUE</strong> if the syntax is valid; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p></returns>
            <remarks>
            <p>This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods).</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476815</doc-id>
            <unmanaged>BOOL ID3DX11EffectVariable::IsValid()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::IsValid</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetTypeInfo">
            <summary>
            <p>Get type information.</p>
            </summary>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476814</doc-id>
            <unmanaged>ID3DX11EffectType* ID3DX11EffectVariable::GetType()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetType</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetDescription(SharpDX.Direct3D11.EffectVariableDescription@)">
            <summary>
            <p>Get a description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to an effect-variable description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectVariableDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476807</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVariable::GetDesc([Out] D3DX11_EFFECT_VARIABLE_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetAnnotationByIndex(System.Int32)">
            <summary>
            <p>Get an annotation by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>Annonations can be attached to a technique, a pass, or a global variable.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476805</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetAnnotationByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetAnnotationByName(System.String)">
            <summary>
            <p>Get an annotation by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The annotation name.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.  Note that if the annotation is not found the <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong> returned  will be empty. The <strong>ID3DX11EffectVariable::IsValid</strong> method should be called to determine whether the annotation was found.</p></returns>
            <remarks>
            <p>Annonations can be attached to a technique, a pass, or a global variable.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476806</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetAnnotationByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetAnnotationByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetMemberByIndex(System.Int32)">
            <summary>
            <p>Get a structure member by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>If the effect variable is an structure, use this method to look up a member by index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476809</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetMemberByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetMemberByName(System.String)">
            <summary>
            <p>Get a structure member by name.</p>
            </summary>
            <param name = "name"><dd>  <p>Member name.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>If the effect variable is an structure, use this method to look up a member by name.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476810</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetMemberByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetMemberBySemantic(System.String)">
            <summary>
            <p>Get a structure member by semantic.</p>
            </summary>
            <param name = "semantic"><dd>  <p>The semantic.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>If the effect variable is an structure, use this method to look up a member by attached semantic.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476811</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberBySemantic([In] const char* Semantic)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetMemberBySemantic</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetElement(System.Int32)">
            <summary>
            <p>Get an array element.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index; otherwise 0.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>If the effect variable is an array, use this method to return one of the elements.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476808</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetElement([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetElement</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetParentConstantBuffer">
            <summary>
            <p>Get a constant buffer.</p>
            </summary>
            <returns><p>A reference to a <strong><see cref = "T:SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
            <remarks>
            <p>Effect variables are read-from or written-to a constant buffer.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476812</doc-id>
            <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11EffectVariable::GetParentConstantBuffer()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetParentConstantBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsScalar_">
            <summary>
            <p>Get a scalar variable.</p>
            </summary>
            <returns><p>A reference to a scalar variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectScalarVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsScalar returns a version of the effect variable that has been specialized to a scalar variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain scalar data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476799</doc-id>
            <unmanaged>ID3DX11EffectScalarVariable* ID3DX11EffectVariable::AsScalar()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsScalar</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsVector_">
            <summary>
            <p>Get a vector variable.</p>
            </summary>
            <returns><p>A reference to a vector variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectVectorVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsVector returns a version of the effect variable that has been specialized to a vector variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain vector data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476804</doc-id>
            <unmanaged>ID3DX11EffectVectorVariable* ID3DX11EffectVariable::AsVector()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsVector</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsMatrix_">
            <summary>
            <p>Get a matrix variable.</p>
            </summary>
            <returns><p>A reference to a matrix variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectMatrixVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsMatrix returns a version of the effect variable that has been specialized to a matrix variable. Similar to a cast, this specialization will  return an invalid object if the effect variable does not contain matrix data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476795</doc-id>
            <unmanaged>ID3DX11EffectMatrixVariable* ID3DX11EffectVariable::AsMatrix()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsMatrix</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsString_">
            <summary>
            <p>Get a string variable.</p>
            </summary>
            <returns><p>A reference to a string variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectStringVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsString returns a version of the effect variable that has been specialized to a string variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain string data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476802</doc-id>
            <unmanaged>ID3DX11EffectStringVariable* ID3DX11EffectVariable::AsString()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsString</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsClassInstance_">
            <summary>
            <p>Get a class-instance variable.</p>
            </summary>
            <returns><p>A reference to class-instance variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476790</doc-id>
            <unmanaged>ID3DX11EffectClassInstanceVariable* ID3DX11EffectVariable::AsClassInstance()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsClassInstance</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsInterface_">
            <summary>
            <p>Get an interface variable.</p>
            </summary>
            <returns><p>A reference to an interface variable.  See <strong><see cref = "T:SharpDX.Direct3D11.EffectInterfaceVariable"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476794</doc-id>
            <unmanaged>ID3DX11EffectInterfaceVariable* ID3DX11EffectVariable::AsInterface()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsInterface</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsShaderResource_">
            <summary>
            <p>Get a shader-resource variable.</p>
            </summary>
            <returns><p>A reference to a shader-resource variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectShaderResourceVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsShaderResource returns a version of the effect variable that has been specialized to a shader-resource variable.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader-resource data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476801</doc-id>
            <unmanaged>ID3DX11EffectShaderResourceVariable* ID3DX11EffectVariable::AsShaderResource()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsShaderResource</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsUnorderedAccessView_">
            <summary>
            <p>Get an unordered-access-view variable.</p>
            </summary>
            <returns><p>A reference to an unordered-access-view variable.  See <strong><see cref = "T:SharpDX.Direct3D11.EffectUnorderedAccessViewVariable"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476803</doc-id>
            <unmanaged>ID3DX11EffectUnorderedAccessViewVariable* ID3DX11EffectVariable::AsUnorderedAccessView()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsUnorderedAccessView</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsRenderTargetView_">
            <summary>
            <p>Get a render-target-view variable.</p>
            </summary>
            <returns><p>A reference to a render-target-view variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectRenderTargetViewVariable"/></strong>.</p></returns>
            <remarks>
            <p>This method returns a version of the effect variable that has been specialized to a render-target-view variable.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain render-target-view data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476797</doc-id>
            <unmanaged>ID3DX11EffectRenderTargetViewVariable* ID3DX11EffectVariable::AsRenderTargetView()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsRenderTargetView</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsDepthStencilView_">
            <summary>
            <p>Get a depth-stencil-view variable.</p>
            </summary>
            <returns><p>A reference to a depth-stencil-view variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectDepthStencilViewVariable"/></strong>.</p></returns>
            <remarks>
            <p>This method returns a version of the effect variable that has been specialized to a depth-stencil-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil-view data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476793</doc-id>
            <unmanaged>ID3DX11EffectDepthStencilViewVariable* ID3DX11EffectVariable::AsDepthStencilView()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsDepthStencilView</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsConstantBuffer_">
            <summary>
            <p>Get a constant buffer.</p>
            </summary>
            <returns><p>A reference to a constant buffer. See <strong><see cref = "T:SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>
            <remarks>
            <p>AsConstantBuffer returns a version of the effect variable that has been specialized to a constant buffer.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain constant buffer data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476791</doc-id>
            <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11EffectVariable::AsConstantBuffer()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsConstantBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsShader_">
            <summary>
            <p>Get a shader variable.</p>
            </summary>
            <returns><p>A reference to a shader variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectShaderVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsShader returns a version of the effect variable that has been specialized to a shader variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain shader data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476800</doc-id>
            <unmanaged>ID3DX11EffectShaderVariable* ID3DX11EffectVariable::AsShader()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsShader</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsBlend_">
            <summary>
            <p>Get a effect-blend variable.</p>
            </summary>
            <returns><p>A reference to an effect blend variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectBlendVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsBlend returns a version of the effect variable that has been specialized to an effect-blend variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain effect-blend data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476789</doc-id>
            <unmanaged>ID3DX11EffectBlendVariable* ID3DX11EffectVariable::AsBlend()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsBlend</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsDepthStencil_">
            <summary>
            <p>Get a depth-stencil variable.</p>
            </summary>
            <returns><p>A reference to a depth-stencil variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectDepthStencilVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsDepthStencil returns a version of the effect variable that has been specialized to a depth-stencil variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476792</doc-id>
            <unmanaged>ID3DX11EffectDepthStencilVariable* ID3DX11EffectVariable::AsDepthStencil()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsDepthStencil</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsRasterizer_">
            <summary>
            <p>Get a rasterizer variable.</p>
            </summary>
            <returns><p>A reference to a rasterizer variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectRasterizerVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsRasterizer returns a version of the effect variable that has been specialized to a rasterizer variable. Similar to a cast, this specialization  will return an invalid object if the effect variable does not contain rasterizer data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476796</doc-id>
            <unmanaged>ID3DX11EffectRasterizerVariable* ID3DX11EffectVariable::AsRasterizer()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsRasterizer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.AsSampler_">
            <summary>
            <p>Get a sampler variable.</p>
            </summary>
            <returns><p>A reference to a sampler variable. See <strong><see cref = "T:SharpDX.Direct3D11.EffectSamplerVariable"/></strong>.</p></returns>
            <remarks>
            <p>AsSampler returns a version of the effect variable that has been specialized to a sampler variable. Similar to a cast, this specialization will  return an invalid object if the effect variable does not contain sampler data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476798</doc-id>
            <unmanaged>ID3DX11EffectSamplerVariable* ID3DX11EffectVariable::AsSampler()</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::AsSampler</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.SetRawValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <p>Set data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the variable.</p> </dd></param>
            <param name = "byteOffset"><dd>  <p>The offset (in bytes) from the beginning of the reference to the data.</p> </dd></param>
            <param name = "byteCount"><dd>  <p>The number of bytes to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>This method does no conversion or type checking; it is therefore a very quick way to access array items.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476816</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVariable::SetRawValue([In, Buffer] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int ByteCount)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::SetRawValue</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVariable.GetRawValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <p>Get data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the variable.</p> </dd></param>
            <param name = "byteOffset"><dd>  <p>The offset (in bytes) from the beginning of the reference to the data.</p> </dd></param>
            <param name = "byteCount"><dd>  <p>The number of bytes to get.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>This method does no conversion or type checking; it is therefore a very quick way to access array items.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476813</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVariable::GetRawValue([Out, Buffer] void* pData,[In] unsigned int ByteOffset,[In] unsigned int ByteCount)</unmanaged>
            <unmanaged-short>ID3DX11EffectVariable::GetRawValue</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetIntVector">
            <summary>	
            Get a four-component vector that contains integer data.	
            </summary>	
            <returns>Returns a four-component vector that contains integer data </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetIntVector([Out] int* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetFloatVector">
            <summary>	
            Get a four-component vector that contains floating-point data.	
            </summary>	
            <returns>Returns a four-component vector that contains floating-point data.</returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetFloatVector([Out] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetBoolVector">
            <summary>	
            Get a four-component vector that contains boolean data.	
            </summary>	
            <returns>a four-component vector that contains boolean data. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetBoolVector([Out, Buffer] BOOL* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetVector``1">
            <summary>	
            Get a four-component vector.	
            </summary>	
            <typeparam name="T">Type of the four-component vector</typeparam>
            <returns>a four-component vector. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetFloatVector([Out, Buffer] BOOL* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawInt4[])">
            <summary>	
            Set an array of four-component vectors that contain integer data.	
            </summary>	
            <param name="array">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetIntVectorArray([In, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawVector4[])">
            <summary>	
            Set an array of four-component vectors that contain floating-point data.	
            </summary>	
            <param name="array">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVectorArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set``1(``0[])">
            <summary>
            Set an array of four-component vectors that contain floating-point data.
            </summary>
            <typeparam name="T">Type of the four-component vector</typeparam>
            <param name="array">A reference to the start of the data to set.</param>
            <returns>
            Returns one of the following {{Direct3D 10 Return Codes}}.
            </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVectorArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set``1(``0)">
            <summary>	
            Set a x-component vector.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set``1(``0@)">
            <summary>	
            Set a x-component vector.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawVector2)">
            <summary>	
            Set a two-component vector that contains floating-point data.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawVector3)">
            <summary>	
            Set a three-component vector that contains floating-point data.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawColor4)">
            <summary>	
            Set a four-component color that contains floating-point data.	
            </summary>	
            <param name="value">A reference to the first component. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVector([In] float* pData)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawColor4[])">
            <summary>	
            Set an array of four-component color that contain floating-point data.	
            </summary>	
            <param name="array">A reference to the start of the data to set. </param>
            <returns>Returns one of the following {{Direct3D 10 Return Codes}}. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::SetFloatVectorArray([In, Buffer] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetIntVectorArray(System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain integer data.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of four-component vectors that contain integer data. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetIntVectorArray([Out, Buffer] int* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetFloatVectorArray(System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain floating-point data.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>Returns an array of four-component vectors that contain floating-point data. </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetFloatVectorArray([None] float* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetBoolVectorArray(System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain boolean data.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>an array of four-component vectors that contain boolean data.	 </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetBoolVectorArray([Out, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetVectorArray``1(System.Int32)">
            <summary>	
            Get an array of four-component vectors that contain boolean data.	
            </summary>	
            <param name="count">The number of array elements to set. </param>
            <returns>an array of four-component vectors that contain boolean data.	 </returns>
            <unmanaged>HRESULT ID3D11EffectVectorVariable::GetBoolVectorArray([Out, Buffer] BOOL* pData,[None] int Offset,[None] int Count)</unmanaged>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawBool4)">
            <summary>
            <p>Set a four-component vector that contains boolean data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476824</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetBoolVector([In] const SHARPDX_BOOL4* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::SetBoolVector</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawInt4)">
            <summary>
            <p>Set a four-component vector that contains integer data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476828</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetIntVector([In] const SHARPDX_INT4* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::SetIntVector</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(System.Single[])">
            <summary>
            <p>Set a four-component vector that contains floating-point data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476826</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetFloatVector([In, Buffer] const float* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::SetFloatVector</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetBoolVector(SharpDX.Mathematics.Interop.RawBool4@)">
            <summary>
            <p>Get a four-component vector that contains boolean data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476818</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetBoolVector([Out] SHARPDX_BOOL4* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::GetBoolVector</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetIntVector(SharpDX.Mathematics.Interop.RawInt4@)">
            <summary>
            <p>Get a four-component vector that contains integer data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476822</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetIntVector([Out] SHARPDX_INT4* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::GetIntVector</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetFloatVector(SharpDX.Mathematics.Interop.RawVector4@)">
            <summary>
            <p>Get a four-component vector that contains floating-point data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476820</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetFloatVector([Out] SHARPDX_VECTOR4* pData)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::GetFloatVector</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawBool4[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of four-component vectors that contain boolean data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476825</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetBoolVectorArray([In, Buffer] const SHARPDX_BOOL4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::SetBoolVectorArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawInt4[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of four-component vectors that contain integer data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476829</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetIntVectorArray([In, Buffer] const SHARPDX_INT4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::SetIntVectorArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.Set(SharpDX.Mathematics.Interop.RawVector4[],System.Int32,System.Int32)">
            <summary>
            <p>Set an array of four-component vectors that contain floating-point data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476827</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetFloatVectorArray([In, Buffer] const SHARPDX_VECTOR4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::SetFloatVectorArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetBoolVectorArray(SharpDX.Mathematics.Interop.RawBool4[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of four-component vectors that contain boolean data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476819</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetBoolVectorArray([Out, Buffer] SHARPDX_BOOL4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::GetBoolVectorArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetIntVectorArray(SharpDX.Mathematics.Interop.RawInt4[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of four-component vectors that contain integer data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476823</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetIntVectorArray([Out, Buffer] SHARPDX_INT4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::GetIntVectorArray</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectVectorVariable.GetFloatVectorArray(SharpDX.Mathematics.Interop.RawVector4[],System.Int32,System.Int32)">
            <summary>
            <p>Get an array of four-component vectors that contain floating-point data.</p>
            </summary>
            <param name = "dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>
            <param name = "offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>
            <param name = "count"><dd>  <p>The number of array elements to set.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476821</doc-id>
            <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetFloatVectorArray([Out, Buffer] SHARPDX_VECTOR4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>
            <unmanaged-short>ID3DX11EffectVectorVariable::GetFloatVectorArray</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableFlags.Annotation">
            <summary>
            No documentation.
            </summary>
            <unmanaged>D3DX11_EFFECT_VARIABLE_ANNOTATION</unmanaged>
            <unmanaged-short>D3DX11_EFFECT_VARIABLE_ANNOTATION</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableFlags.ExplicitBindPoint">
            <summary>
            No documentation.
            </summary>
            <unmanaged>D3DX11_EFFECT_VARIABLE_EXPLICIT_BIND_POINT</unmanaged>
            <unmanaged-short>D3DX11_EFFECT_VARIABLE_EXPLICIT_BIND_POINT</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableFlags.None">
            <summary>
            None
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectClassInstanceVariable.ClassInstance">
            <summary>
            <p>Gets a class instance.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476659</doc-id>
            <unmanaged>GetClassInstance</unmanaged>
            <unmanaged-short>GetClassInstance</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectClassInstanceVariable.GetClassInstance(SharpDX.Direct3D11.ClassInstance@)">
            <summary>
            <p>Gets a class instance.</p>
            </summary>
            <param name = "classInstanceOut"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.ClassInstance"/></strong> reference that will be set to class instance.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476659</doc-id>
            <unmanaged>HRESULT ID3DX11EffectClassInstanceVariable::GetClassInstance([Out] ID3D11ClassInstance** ppClassInstance)</unmanaged>
            <unmanaged-short>ID3DX11EffectClassInstanceVariable::GetClassInstance</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectConstantBuffer.SetConstantBuffer(SharpDX.Direct3D11.Buffer)">
            <summary>
            <p>Set a constant-buffer.</p>
            </summary>
            <param name = "constantBufferRef"><dd>  <p>A reference to a constant-buffer interface. See <strong><see cref = "T:SharpDX.Direct3D11.Buffer"/></strong>.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476673</doc-id>
            <unmanaged>HRESULT ID3DX11EffectConstantBuffer::SetConstantBuffer([In] ID3D11Buffer* pConstantBuffer)</unmanaged>
            <unmanaged-short>ID3DX11EffectConstantBuffer::SetConstantBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectConstantBuffer.UndoSetConstantBuffer">
            <summary>
            <p>Reverts a previously set constant buffer.</p>
            </summary>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476675</doc-id>
            <unmanaged>HRESULT ID3DX11EffectConstantBuffer::UndoSetConstantBuffer()</unmanaged>
            <unmanaged-short>ID3DX11EffectConstantBuffer::UndoSetConstantBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectConstantBuffer.GetConstantBuffer">
            <summary>
            <p>Get a constant-buffer.</p>
            </summary>
            <returns><dd>  <p>The address of a reference to a constant-buffer interface. See <strong><see cref = "T:SharpDX.Direct3D11.Buffer"/></strong>.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476671</doc-id>
            <unmanaged>HRESULT ID3DX11EffectConstantBuffer::GetConstantBuffer([Out] ID3D11Buffer** ppConstantBuffer)</unmanaged>
            <unmanaged-short>ID3DX11EffectConstantBuffer::GetConstantBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectConstantBuffer.SetTextureBuffer(SharpDX.Direct3D11.ShaderResourceView)">
            <summary>
            <p>Set a texture-buffer.</p>
            </summary>
            <param name = "textureBufferRef"><dd>  <p>A reference to a shader-resource-view interface for accessing a texture buffer.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476674</doc-id>
            <unmanaged>HRESULT ID3DX11EffectConstantBuffer::SetTextureBuffer([In] ID3D11ShaderResourceView* pTextureBuffer)</unmanaged>
            <unmanaged-short>ID3DX11EffectConstantBuffer::SetTextureBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectConstantBuffer.UndoSetTextureBuffer">
            <summary>
            <p>Reverts a previously set texture buffer.</p>
            </summary>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476676</doc-id>
            <unmanaged>HRESULT ID3DX11EffectConstantBuffer::UndoSetTextureBuffer()</unmanaged>
            <unmanaged-short>ID3DX11EffectConstantBuffer::UndoSetTextureBuffer</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectConstantBuffer.GetTextureBuffer">
            <summary>
            <p>Get a texture-buffer.</p>
            </summary>
            <returns><dd>  <p>The address of a reference to a shader-resource-view interface for accessing a texture buffer. See <strong><see cref = "T:SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476672</doc-id>
            <unmanaged>HRESULT ID3DX11EffectConstantBuffer::GetTextureBuffer([Out] ID3D11ShaderResourceView** ppTextureBuffer)</unmanaged>
            <unmanaged-short>ID3DX11EffectConstantBuffer::GetTextureBuffer</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectGroup.IsValid">
            <summary>
            <p>Test an effect to see if it contains valid syntax.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476693</doc-id>
            <unmanaged>IsValid</unmanaged>
            <unmanaged-short>IsValid</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectGroup.Description">
            <summary>
            <p>Gets a group description.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476690</doc-id>
            <unmanaged>GetDesc</unmanaged>
            <unmanaged-short>GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectGroup.IsValid_">
            <summary>
            <p>Test an effect to see if it contains valid syntax.</p>
            </summary>
            <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476693</doc-id>
            <unmanaged>BOOL ID3DX11EffectGroup::IsValid()</unmanaged>
            <unmanaged-short>ID3DX11EffectGroup::IsValid</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectGroup.GetDescription(SharpDX.Direct3D11.EffectGroupDescription@)">
            <summary>
            <p>Gets a group description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a <strong><see cref = "T:SharpDX.Direct3D11.EffectGroupDescription"/></strong> structure.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476690</doc-id>
            <unmanaged>HRESULT ID3DX11EffectGroup::GetDesc([Out] D3DX11_GROUP_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectGroup::GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectGroup.GetAnnotationByIndex(System.Int32)">
            <summary>
            <p>Get an annotation by index.</p>
            </summary>
            <param name = "index"><dd>  <p>Index of the annotation.</p> </dd></param>
            <returns><p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong> interface.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476688</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectGroup::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectGroup::GetAnnotationByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectGroup.GetAnnotationByName(System.String)">
            <summary>
            <p>Get an annotation by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The name of the annotation.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>. Note that if the annotation is not found the <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong> returned will be empty. The <strong>ID3DX11EffectVariable::IsValid</strong> method should be called to determine whether the annotation was found.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476689</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectGroup::GetAnnotationByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectGroup::GetAnnotationByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectGroup.GetTechniqueByIndex(System.Int32)">
            <summary>
            <p>Get a technique by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectTechnique"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476691</doc-id>
            <unmanaged>ID3DX11EffectTechnique* ID3DX11EffectGroup::GetTechniqueByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectGroup::GetTechniqueByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectGroup.GetTechniqueByName(System.String)">
            <summary>
            <p>Get a technique by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The name of the technique.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectTechnique"/></strong>, or <strong><c>null</c></strong> if the technique is not found.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476692</doc-id>
            <unmanaged>ID3DX11EffectTechnique* ID3DX11EffectGroup::GetTechniqueByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectGroup::GetTechniqueByName</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectInterfaceVariable.ClassInstance">
            <summary>
            <p>Get or sets a class instance.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476695</doc-id>
            <unmanaged>GetClassInstance / SetClassInstance</unmanaged>
            <unmanaged-short>GetClassInstance</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectInterfaceVariable.SetClassInstance(SharpDX.Direct3D11.EffectClassInstanceVariable)">
            <summary>
            <p>Sets a class instance.</p>
            </summary>
            <param name = "effectClassInstanceRef"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong> interface.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476696</doc-id>
            <unmanaged>HRESULT ID3DX11EffectInterfaceVariable::SetClassInstance([In] ID3DX11EffectClassInstanceVariable* pEffectClassInstance)</unmanaged>
            <unmanaged-short>ID3DX11EffectInterfaceVariable::SetClassInstance</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectInterfaceVariable.GetClassInstance(SharpDX.Direct3D11.EffectClassInstanceVariable@)">
            <summary>
            <p>Get a class instance.</p>
            </summary>
            <param name = "effectClassInstanceOut"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong> reference that will be set to the class instance.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476695</doc-id>
            <unmanaged>HRESULT ID3DX11EffectInterfaceVariable::GetClassInstance([Out] ID3DX11EffectClassInstanceVariable** ppEffectClassInstance)</unmanaged>
            <unmanaged-short>ID3DX11EffectInterfaceVariable::GetClassInstance</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetShaderDescription(System.Int32)">
            <summary>
            <p>Get a shader description.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><dd>  <p>A reference to a shader description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectShaderDescription"/></strong>).</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476761</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetShaderDesc([In] unsigned int ShaderIndex,[Out] D3DX11_EFFECT_SHADER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetShaderDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetVertexShader(System.Int32)">
            <summary>
            <p>Get a vertex shader.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><dd>  <p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.VertexShader"/></strong> reference that will be set to the vertex shader on return.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476762</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetVertexShader([In] unsigned int ShaderIndex,[Out] ID3D11VertexShader** ppVS)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetVertexShader</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetGeometryShader(System.Int32)">
            <summary>
            <p>Get a geometry shader.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><dd>  <p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.GeometryShader"/></strong> reference that will be set to the geometry shader on return.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476755</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetGeometryShader([In] unsigned int ShaderIndex,[Out] ID3D11GeometryShader** ppGS)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetGeometryShader</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetPixelShader(System.Int32)">
            <summary>
            <p>Get a pixel shader.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><dd>  <p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.PixelShader"/></strong> reference that will be set to the pixel shader on return.</p> </dd></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476760</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetPixelShader([In] unsigned int ShaderIndex,[Out] ID3D11PixelShader** ppPS)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetPixelShader</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetHullShader(System.Int32,SharpDX.Direct3D11.HullShader@)">
            <summary>
            <p>Get a hull shader.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>Index of the shader.</p> </dd></param>
            <param name = "hSOut"><dd>  <p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.HullShader"/></strong> reference that will be set to the hull shader on return.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476756</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetHullShader([In] unsigned int ShaderIndex,[Out] ID3D11HullShader** ppHS)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetHullShader</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetDomainShader(System.Int32,SharpDX.Direct3D11.DomainShader@)">
            <summary>
            <p>Get a domain shader.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>Index of the domain shader.</p> </dd></param>
            <param name = "dSOut"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.DomainShader"/></strong> reference that will be set to the domain shader on return.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476754</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetDomainShader([In] unsigned int ShaderIndex,[Out] ID3D11DomainShader** ppDS)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetDomainShader</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetComputeShader(System.Int32,SharpDX.Direct3D11.ComputeShader@)">
            <summary>
            <p>Get a compute shader.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>Index of the compute shader.</p> </dd></param>
            <param name = "cSOut"><dd>  <p>Pointer to an <strong><see cref = "T:SharpDX.Direct3D11.ComputeShader"/></strong> reference that will be set to the compute shader on return.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476753</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetComputeShader([In] unsigned int ShaderIndex,[Out] ID3D11ComputeShader** ppCS)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetComputeShader</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetInputSignatureElementDescription(System.Int32,System.Int32)">
            <summary>
            <p>Get an input-signature description.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>A zero-based shader index.</p> </dd></param>
            <param name = "element"><dd>  <p>A zero-based shader-element index.</p> </dd></param>
            <returns><dd>  <p>A reference to a parameter description (see <strong><see cref = "T:SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></returns>
            <remarks>
            <p>An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters).  The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476757</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetInputSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetInputSignatureElementDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetOutputSignatureElementDescription(System.Int32,System.Int32)">
            <summary>
            <p>Get an output-signature description.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>A zero-based shader index.</p> </dd></param>
            <param name = "element"><dd>  <p>A zero-based element index.</p> </dd></param>
            <returns><dd>  <p>A reference to a parameter description (see <strong><see cref = "T:SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></returns>
            <remarks>
            <p>An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters).  The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476758</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetOutputSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetOutputSignatureElementDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectShaderVariable.GetPatchConstantSignatureElementDescription(System.Int32,System.Int32,SharpDX.D3DCompiler.ShaderParameterDescription@)">
            <summary>
            <p>Get a patch constant signature description.</p>
            </summary>
            <param name = "shaderIndex"><dd>  <p>A zero-based shader index. </p> </dd></param>
            <param name = "element"><dd>  <p>A zero-based element index. </p> </dd></param>
            <param name = "descRef"><dd>  <p>A reference to a parameter description (see <strong><see cref = "T:SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476759</doc-id>
            <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetPatchConstantSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectShaderVariable::GetPatchConstantSignatureElementDesc</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectTechnique.IsValid">
            <summary>
            <p>Test a technique to see if it contains valid syntax.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476773</doc-id>
            <unmanaged>IsValid</unmanaged>
            <unmanaged-short>IsValid</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectTechnique.Description">
            <summary>
            <p>Get a technique description.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476770</doc-id>
            <unmanaged>GetDesc</unmanaged>
            <unmanaged-short>GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectTechnique.IsValid_">
            <summary>
            <p>Test a technique to see if it contains valid syntax.</p>
            </summary>
            <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476773</doc-id>
            <unmanaged>BOOL ID3DX11EffectTechnique::IsValid()</unmanaged>
            <unmanaged-short>ID3DX11EffectTechnique::IsValid</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectTechnique.GetDescription(SharpDX.Direct3D11.EffectTechniqueDescription@)">
            <summary>
            <p>Get a technique description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to a technique description (see <strong><see cref = "T:SharpDX.Direct3D11.EffectTechniqueDescription"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476770</doc-id>
            <unmanaged>HRESULT ID3DX11EffectTechnique::GetDesc([Out] D3DX11_TECHNIQUE_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectTechnique::GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectTechnique.GetAnnotationByIndex(System.Int32)">
            <summary>
            <p>Get an annotation by index.</p>
            </summary>
            <param name = "index"><dd>  <p>The zero-based index of the interface reference.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>Use an annotation to attach a piece of metadata to a technique.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476768</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectTechnique::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectTechnique::GetAnnotationByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectTechnique.GetAnnotationByName(System.String)">
            <summary>
            <p>Get an annotation by name.</p>
            </summary>
            <param name = "name"><dd>  <p>Name of the annotation.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>
            <remarks>
            <p>Use an annotation to attach a piece of metadata to a technique.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476769</doc-id>
            <unmanaged>ID3DX11EffectVariable* ID3DX11EffectTechnique::GetAnnotationByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectTechnique::GetAnnotationByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectTechnique.GetPassByIndex(System.Int32)">
            <summary>
            <p>Get a pass by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to a <strong><see cref = "T:SharpDX.Direct3D11.EffectPass"/></strong>.</p></returns>
            <remarks>
            <p>A technique contains one or more passes; get a pass using a name or an index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476771</doc-id>
            <unmanaged>ID3DX11EffectPass* ID3DX11EffectTechnique::GetPassByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectTechnique::GetPassByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectTechnique.GetPassByName(System.String)">
            <summary>
            <p>Get a pass by name.</p>
            </summary>
            <param name = "name"><dd>  <p>The name of the pass.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectPass"/></strong>.</p></returns>
            <remarks>
            <p>A technique contains one or more passes; get a pass using a name or an index.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476772</doc-id>
            <unmanaged>ID3DX11EffectPass* ID3DX11EffectTechnique::GetPassByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectTechnique::GetPassByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectTechnique.ComputeStateBlockMask(SharpDX.Direct3D11.StateBlockMask@)">
            <summary>
            <p>Compute a state-block mask to allow/prevent state changes.</p>
            </summary>
            <param name = "stateBlockMaskRef"><dd>  <p>A reference to a state-block mask (see <strong><see cref = "T:SharpDX.Direct3D11.StateBlockMask"/></strong>).</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476767</doc-id>
            <unmanaged>HRESULT ID3DX11EffectTechnique::ComputeStateBlockMask([InOut] D3DX11_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>
            <unmanaged-short>ID3DX11EffectTechnique::ComputeStateBlockMask</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectType.IsValid">
            <summary>
            <p>Tests that the effect type is valid.</p>
            </summary>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476782</doc-id>
            <unmanaged>IsValid</unmanaged>
            <unmanaged-short>IsValid</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.EffectType.Description">
            <summary>
            <p>Get an effect-type description.</p>
            </summary>
            <remarks>
            <p>The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476775</doc-id>
            <unmanaged>GetDesc</unmanaged>
            <unmanaged-short>GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectType.IsValid_">
            <summary>
            <p>Tests that the effect type is valid.</p>
            </summary>
            <returns><p><strong>TRUE</strong> if it is valid; otherwise <strong><see cref = "F:SharpDX.Result.False"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476782</doc-id>
            <unmanaged>BOOL ID3DX11EffectType::IsValid()</unmanaged>
            <unmanaged-short>ID3DX11EffectType::IsValid</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectType.GetDescription(SharpDX.Direct3D11.EffectTypeDescription@)">
            <summary>
            <p>Get an effect-type description.</p>
            </summary>
            <param name = "descRef"><dd>  <p>A reference to an effect-type description. See <strong><see cref = "T:SharpDX.Direct3D11.EffectTypeDescription"/></strong>.</p> </dd></param>
            <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>
            <remarks>
            <p>The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type.</p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476775</doc-id>
            <unmanaged>HRESULT ID3DX11EffectType::GetDesc([Out] D3DX11_EFFECT_TYPE_DESC* pDesc)</unmanaged>
            <unmanaged-short>ID3DX11EffectType::GetDesc</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectType.GetMemberTypeByIndex(System.Int32)">
            <summary>
            <p>Get a member type by index.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476779</doc-id>
            <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeByIndex([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectType::GetMemberTypeByIndex</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectType.GetMemberTypeByName(System.String)">
            <summary>
            <p>Get an member type by name.</p>
            </summary>
            <param name = "name"><dd>  <p>A member's name.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476780</doc-id>
            <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeByName([In] const char* Name)</unmanaged>
            <unmanaged-short>ID3DX11EffectType::GetMemberTypeByName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectType.GetMemberTypeBySemantic(System.String)">
            <summary>
            <p>Get a member type by semantic.</p>
            </summary>
            <param name = "semantic"><dd>  <p>A semantic.</p> </dd></param>
            <returns><p>A reference to an <strong><see cref = "T:SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476781</doc-id>
            <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeBySemantic([In] const char* Semantic)</unmanaged>
            <unmanaged-short>ID3DX11EffectType::GetMemberTypeBySemantic</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectType.GetMemberName(System.Int32)">
            <summary>
            <p>Get the name of a member.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>The name of the member.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476776</doc-id>
            <unmanaged>const char* ID3DX11EffectType::GetMemberName([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectType::GetMemberName</unmanaged-short>
        </member>
        <member name="M:SharpDX.Direct3D11.EffectType.GetMemberSemantic(System.Int32)">
            <summary>
            <p>Get the semantic attached to a member.</p>
            </summary>
            <param name = "index"><dd>  <p>A zero-based index.</p> </dd></param>
            <returns><p>A string that contains the semantic.</p></returns>
            <remarks>
            <strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.?
            </remarks>
            <doc-id>ff476778</doc-id>
            <unmanaged>const char* ID3DX11EffectType::GetMemberSemantic([In] unsigned int Index)</unmanaged>
            <unmanaged-short>ID3DX11EffectType::GetMemberSemantic</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectDescription">
            <summary>
            <p>Describes an effect.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectDescription"/> is used with <strong>ID3DX11Effect::GetDesc</strong>.</p>
            </remarks>
            <doc-id>ff476303</doc-id>
            <unmanaged>D3DX11_EFFECT_DESC</unmanaged>
            <unmanaged-short>D3DX11_EFFECT_DESC</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectDescription.ConstantBufferCount">
            <summary>
            <dd> <p>Number of constant buffers in this effect.</p> </dd>
            </summary>
            <doc-id>ff476303</doc-id>
            <unmanaged>ConstantBuffers</unmanaged>
            <unmanaged-short>ConstantBuffers</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectDescription.GlobalVariableCount">
            <summary>
            <dd> <p>Number of global variables in this effect.</p> </dd>
            </summary>
            <doc-id>ff476303</doc-id>
            <unmanaged>GlobalVariables</unmanaged>
            <unmanaged-short>GlobalVariables</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectDescription.InterfaceVariableCount">
            <summary>
            <dd> <p>Number of global interfaces in this effect.</p> </dd>
            </summary>
            <doc-id>ff476303</doc-id>
            <unmanaged>InterfaceVariables</unmanaged>
            <unmanaged-short>InterfaceVariables</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectDescription.TechniqueCount">
            <summary>
            <dd> <p>Number of techniques in this effect.</p> </dd>
            </summary>
            <doc-id>ff476303</doc-id>
            <unmanaged>Techniques</unmanaged>
            <unmanaged-short>Techniques</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectDescription.GroupCount">
            <summary>
            <dd> <p>Number of groups in this effect.</p> </dd>
            </summary>
            <doc-id>ff476303</doc-id>
            <unmanaged>Groups</unmanaged>
            <unmanaged-short>Groups</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectGroupDescription">
            <summary>
            <p>Describes an effect group.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectGroupDescription"/> is used with <strong>ID3DX11EffectTechnique::GetDesc</strong>.</p>
            </remarks>
            <doc-id>ff476314</doc-id>
            <unmanaged>D3DX11_GROUP_DESC</unmanaged>
            <unmanaged-short>D3DX11_GROUP_DESC</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectGroupDescription.Name">
            <summary>
            <dd> <p>Name of this group (only <strong><c>null</c></strong> if global).</p> </dd>
            </summary>
            <doc-id>ff476314</doc-id>
            <unmanaged>Name</unmanaged>
            <unmanaged-short>Name</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectGroupDescription.Techniques">
            <summary>
            <dd> <p>Number of techniques contained in group.</p> </dd>
            </summary>
            <doc-id>ff476314</doc-id>
            <unmanaged>Techniques</unmanaged>
            <unmanaged-short>Techniques</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectGroupDescription.Annotations">
            <summary>
            <dd> <p>Number of annotations on this group.</p> </dd>
            </summary>
            <doc-id>ff476314</doc-id>
            <unmanaged>Annotations</unmanaged>
            <unmanaged-short>Annotations</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectTechniqueDescription">
            <summary>
            <p>Describes an effect technique.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectTechniqueDescription"/> is used with <strong>ID3DX11EffectTechnique::GetDesc</strong>.</p>
            </remarks>
            <doc-id>ff476326</doc-id>
            <unmanaged>D3DX11_TECHNIQUE_DESC</unmanaged>
            <unmanaged-short>D3DX11_TECHNIQUE_DESC</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTechniqueDescription.Name">
            <summary>
            <dd> <p>Name of this technique (<c>null</c> if not anonymous).</p> </dd>
            </summary>
            <doc-id>ff476326</doc-id>
            <unmanaged>Name</unmanaged>
            <unmanaged-short>Name</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTechniqueDescription.PassCount">
            <summary>
            <dd> <p>Number of passes contained in the technique.</p> </dd>
            </summary>
            <doc-id>ff476326</doc-id>
            <unmanaged>Passes</unmanaged>
            <unmanaged-short>Passes</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTechniqueDescription.AnnotationCount">
            <summary>
            <dd> <p>Number of annotations on this technique.</p> </dd>
            </summary>
            <doc-id>ff476326</doc-id>
            <unmanaged>Annotations</unmanaged>
            <unmanaged-short>Annotations</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectTypeDescription">
            <summary>
            <p>Describes an effect-variable type.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectTypeDescription"/> is used with <strong>ID3DX11EffectType::GetDesc</strong> </p>
            </remarks>
            <doc-id>ff476305</doc-id>
            <unmanaged>D3DX11_EFFECT_TYPE_DESC</unmanaged>
            <unmanaged-short>D3DX11_EFFECT_TYPE_DESC</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.TypeName">
            <summary>
            <dd> <p>Name of the type, for example "float4" or "MyStruct".</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>TypeName</unmanaged>
            <unmanaged-short>TypeName</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.Class">
            <summary>
            <dd> <p>The variable class (see <strong>D3D10_SHADER_VARIABLE_CLASS</strong>). </p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>Class</unmanaged>
            <unmanaged-short>Class</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.Type">
            <summary>
            <dd> <p>The variable type (see <strong>D3D10_SHADER_VARIABLE_TYPE</strong>).</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>Type</unmanaged>
            <unmanaged-short>Type</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.Elements">
            <summary>
            <dd> <p>Number of elements in this type (0 if not an array).</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>Elements</unmanaged>
            <unmanaged-short>Elements</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.Members">
            <summary>
            <dd> <p>Number of members (0 if not a structure).</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>Members</unmanaged>
            <unmanaged-short>Members</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.Rows">
            <summary>
            <dd> <p>Number of rows in this type (0 if not a numeric primitive).</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>Rows</unmanaged>
            <unmanaged-short>Rows</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.Columns">
            <summary>
            <dd> <p>Number of columns in this type (0 if not a numeric primitive).</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>Columns</unmanaged>
            <unmanaged-short>Columns</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.PackedSize">
            <summary>
            <dd> <p>Number of bytes required to represent this data type, when tightly packed.</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>PackedSize</unmanaged>
            <unmanaged-short>PackedSize</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.UnpackedSize">
            <summary>
            <dd> <p>Number of bytes occupied by this data type, when laid out in a constant buffer.</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>UnpackedSize</unmanaged>
            <unmanaged-short>UnpackedSize</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectTypeDescription.Stride">
            <summary>
            <dd> <p>Number of bytes to seek between elements, when laid out in a constant buffer.</p> </dd>
            </summary>
            <doc-id>ff476305</doc-id>
            <unmanaged>Stride</unmanaged>
            <unmanaged-short>Stride</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.EffectVariableDescription">
            <summary>
            <p>Describes an effect variable.</p>
            </summary>
            <remarks>
            <p><see cref = "T:SharpDX.Direct3D11.EffectVariableDescription"/> is used with <strong>ID3DX11EffectVariable::GetDesc</strong>.</p>
            </remarks>
            <doc-id>ff476306</doc-id>
            <unmanaged>D3DX11_EFFECT_VARIABLE_DESC</unmanaged>
            <unmanaged-short>D3DX11_EFFECT_VARIABLE_DESC</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableDescription.Name">
            <summary>
            <dd> <p>Name of this variable, annotation, or structure member.</p> </dd>
            </summary>
            <doc-id>ff476306</doc-id>
            <unmanaged>Name</unmanaged>
            <unmanaged-short>Name</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableDescription.Semantic">
            <summary>
            <dd> <p>Semantic string of this variable or structure member (<c>null</c> for annotations or if not present).</p> </dd>
            </summary>
            <doc-id>ff476306</doc-id>
            <unmanaged>Semantic</unmanaged>
            <unmanaged-short>Semantic</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableDescription.Flags">
            <summary>
            <dd> <p>Optional flags for effect variables.</p> </dd>
            </summary>
            <doc-id>ff476306</doc-id>
            <unmanaged>Flags</unmanaged>
            <unmanaged-short>Flags</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableDescription.AnnotationCount">
            <summary>
            <dd> <p>Number of annotations on this variable (always 0 for annotations).</p> </dd>
            </summary>
            <doc-id>ff476306</doc-id>
            <unmanaged>Annotations</unmanaged>
            <unmanaged-short>Annotations</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableDescription.BufferOffset">
            <summary>
            <dd> <p>Offset into containing cbuffer or tbuffer (always 0 for annotations or variables not in constant buffers).</p> </dd>
            </summary>
            <doc-id>ff476306</doc-id>
            <unmanaged>BufferOffset</unmanaged>
            <unmanaged-short>BufferOffset</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.EffectVariableDescription.ExplicitBindPoint">
            <summary>
            <dd> <p>Used if the variable has been explicitly bound using the register keyword. Check Flags for D3DX11_EFFECT_VARIABLE_EXPLICIT_BIND_POINT.</p> </dd>
            </summary>
            <doc-id>ff476306</doc-id>
            <unmanaged>ExplicitBindPoint</unmanaged>
            <unmanaged-short>ExplicitBindPoint</unmanaged-short>
        </member>
        <member name="T:SharpDX.Direct3D11.StateBlockMask">
            <summary>
            <p>Indicates the device state.</p>
            </summary>
            <remarks>
            <p>A state-block mask indicates the device states that a pass or a technique changes.</p>
            </remarks>
            <doc-id>ff476325</doc-id>
            <unmanaged>D3DX11_STATE_BLOCK_MASK</unmanaged>
            <unmanaged-short>D3DX11_STATE_BLOCK_MASK</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.VertexShader">
            <summary>
            <dd> <p>Boolean value indicating whether to save the vertex shader state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>VS</unmanaged>
            <unmanaged-short>VS</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.VSSamplers">
            <summary>
            <dd> <p>Array of vertex-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>VSSamplers</unmanaged>
            <unmanaged-short>VSSamplers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.VSShaderResources">
            <summary>
            <dd> <p>Array of vertex-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>VSShaderResources</unmanaged>
            <unmanaged-short>VSShaderResources</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.VSConstantBuffers">
            <summary>
            <dd> <p>Array of vertex-shader constant buffers. The array is a multi-byte bitmask where each bit represents one constant buffer slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>VSConstantBuffers</unmanaged>
            <unmanaged-short>VSConstantBuffers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.VSInterfaces">
            <summary>
            <dd> <p>Array of vertex-shader interfaces. The array is a multi-byte bitmask where each bit represents one interface slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>VSInterfaces</unmanaged>
            <unmanaged-short>VSInterfaces</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.HullShader">
            <summary>
            <dd> <p>Boolean value indicating whether to save the hull shader state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>HS</unmanaged>
            <unmanaged-short>HS</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.HSSamplers">
            <summary>
            <dd> <p>Array of hull-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>HSSamplers</unmanaged>
            <unmanaged-short>HSSamplers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.HSShaderResources">
            <summary>
            <dd> <p>Array of hull-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>HSShaderResources</unmanaged>
            <unmanaged-short>HSShaderResources</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.HSConstantBuffers">
            <summary>
            <dd> <p>Array of hull-shader constant buffers. The array is a multi-byte bitmask where each bit represents one constant buffer slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>HSConstantBuffers</unmanaged>
            <unmanaged-short>HSConstantBuffers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.HSInterfaces">
            <summary>
            <dd> <p>Array of hull-shader interfaces. The array is a multi-byte bitmask where each bit represents one interface slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>HSInterfaces</unmanaged>
            <unmanaged-short>HSInterfaces</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.DomainShader">
            <summary>
            <dd> <p>Boolean value indicating whether to save the domain shader state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>DS</unmanaged>
            <unmanaged-short>DS</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.DSSamplers">
            <summary>
            <dd> <p>Array of domain-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>DSSamplers</unmanaged>
            <unmanaged-short>DSSamplers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.DSShaderResources">
            <summary>
            <dd> <p>Array of domain-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>DSShaderResources</unmanaged>
            <unmanaged-short>DSShaderResources</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.DSConstantBuffers">
            <summary>
            <dd> <p>Array of domain-shader constant buffers. The array is a multi-byte bitmask where each bit represents one buffer slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>DSConstantBuffers</unmanaged>
            <unmanaged-short>DSConstantBuffers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.DSInterfaces">
            <summary>
            <dd> <p>Array of domain-shader interfaces. The array is a multi-byte bitmask where each bit represents one interface slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>DSInterfaces</unmanaged>
            <unmanaged-short>DSInterfaces</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.GeometryShader">
            <summary>
            <dd> <p>Boolean value indicating whether to save the geometry shader state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>GS</unmanaged>
            <unmanaged-short>GS</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.GSSamplers">
            <summary>
            <dd> <p>Array of geometry-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>GSSamplers</unmanaged>
            <unmanaged-short>GSSamplers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.GSShaderResources">
            <summary>
            <dd> <p>Array of geometry-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>GSShaderResources</unmanaged>
            <unmanaged-short>GSShaderResources</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.GSConstantBuffers">
            <summary>
            <dd> <p>Array of geometry-shader constant buffers. The array is a multi-byte bitmask where each bit represents one buffer slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>GSConstantBuffers</unmanaged>
            <unmanaged-short>GSConstantBuffers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.GSInterfaces">
            <summary>
            <dd> <p>Array of geometry-shader interfaces. The array is a multi-byte bitmask where each bit represents one interface slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>GSInterfaces</unmanaged>
            <unmanaged-short>GSInterfaces</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.PixelShader">
            <summary>
            <dd> <p>Boolean value indicating whether to save the pixel shader state.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>PS</unmanaged>
            <unmanaged-short>PS</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.PSSamplers">
            <summary>
            <dd> <p>Array of pixel-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>PSSamplers</unmanaged>
            <unmanaged-short>PSSamplers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.PSShaderResources">
            <summary>
            <dd> <p>Array of pixel-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>PSShaderResources</unmanaged>
            <unmanaged-short>PSShaderResources</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.PSConstantBuffers">
            <summary>
            <dd> <p>Array of pixel-shader constant buffers. The array is a multi-byte bitmask where each bit represents one constant buffer slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>PSConstantBuffers</unmanaged>
            <unmanaged-short>PSConstantBuffers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.PSInterfaces">
            <summary>
            <dd> <p>Array of pixel-shader interfaces. The array is a multi-byte bitmask where each bit represents one interface slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>PSInterfaces</unmanaged>
            <unmanaged-short>PSInterfaces</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.PSUnorderedAccessViews">
            <summary>
            <dd> <p>Boolean value indicating whether to save the pixel shader unordered access views.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>PSUnorderedAccessViews</unmanaged>
            <unmanaged-short>PSUnorderedAccessViews</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.ComputeShader">
            <summary>
            <dd> <p>Boolean value indicating whether to save the compute shader state.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>CS</unmanaged>
            <unmanaged-short>CS</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.CSSamplers">
            <summary>
            <dd> <p>Array of compute-shader samplers. The array is a multi-byte bitmask where each bit represents one sampler slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>CSSamplers</unmanaged>
            <unmanaged-short>CSSamplers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.CSShaderResources">
            <summary>
            <dd> <p>Array of compute-shader resources. The array is a multi-byte bitmask where each bit represents one resource slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>CSShaderResources</unmanaged>
            <unmanaged-short>CSShaderResources</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.CSConstantBuffers">
            <summary>
            <dd> <p>Array of compute-shader constant buffers. The array is a multi-byte bitmask where each bit represents one constant buffer slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>CSConstantBuffers</unmanaged>
            <unmanaged-short>CSConstantBuffers</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.CSInterfaces">
            <summary>
            <dd> <p>Array of compute-shader interfaces. The array is a multi-byte bitmask where each bit represents one interface slot.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>CSInterfaces</unmanaged>
            <unmanaged-short>CSInterfaces</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.CSUnorderedAccessViews">
            <summary>
            <dd> <p>Boolean value indicating whether to save the compute shader unordered access views.</p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>CSUnorderedAccessViews</unmanaged>
            <unmanaged-short>CSUnorderedAccessViews</unmanaged-short>
        </member>
        <member name="P:SharpDX.Direct3D11.StateBlockMask.IAVertexBuffers">
            <summary>
            <dd> <p>Array of vertex buffers. The array is a multi-byte bitmask where each bit represents one resource slot. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>IAVertexBuffers</unmanaged>
            <unmanaged-short>IAVertexBuffers</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.IAIndexBuffer">
            <summary>
            <dd> <p>Boolean value indicating whether to save the index buffer state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>IAIndexBuffer</unmanaged>
            <unmanaged-short>IAIndexBuffer</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.IAInputLayout">
            <summary>
            <dd> <p>Boolean value indicating whether to save the input layout state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>IAInputLayout</unmanaged>
            <unmanaged-short>IAInputLayout</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.IAPrimitiveTopology">
            <summary>
            <dd> <p>Boolean value indicating whether to save the primitive topology state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>IAPrimitiveTopology</unmanaged>
            <unmanaged-short>IAPrimitiveTopology</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.OMRenderTargets">
            <summary>
            <dd> <p>Boolean value indicating whether to save the render targets states. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>OMRenderTargets</unmanaged>
            <unmanaged-short>OMRenderTargets</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.OMDepthStencilState">
            <summary>
            <dd> <p>Boolean value indicating whether to save the depth-stencil state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>OMDepthStencilState</unmanaged>
            <unmanaged-short>OMDepthStencilState</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.OMBlendState">
            <summary>
            <dd> <p>Boolean value indicating whether to save the blend state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>OMBlendState</unmanaged>
            <unmanaged-short>OMBlendState</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.RSViewports">
            <summary>
            <dd> <p>Boolean value indicating whether to save the viewports states. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>RSViewports</unmanaged>
            <unmanaged-short>RSViewports</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.RSScissorRects">
            <summary>
            <dd> <p>Boolean value indicating whether to save the scissor rectangles states. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>RSScissorRects</unmanaged>
            <unmanaged-short>RSScissorRects</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.RSRasterizerState">
            <summary>
            <dd> <p>Boolean value indicating whether to save the rasterizer state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>RSRasterizerState</unmanaged>
            <unmanaged-short>RSRasterizerState</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.SOBuffers">
            <summary>
            <dd> <p>Boolean value indicating whether to save the stream-out buffers states. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>SOBuffers</unmanaged>
            <unmanaged-short>SOBuffers</unmanaged-short>
        </member>
        <member name="F:SharpDX.Direct3D11.StateBlockMask.Predication">
            <summary>
            <dd> <p>Boolean value indicating whether to save the predication state. </p> </dd>
            </summary>
            <doc-id>ff476325</doc-id>
            <unmanaged>Predication</unmanaged>
            <unmanaged-short>Predication</unmanaged-short>
        </member>
    </members>
</doc>
