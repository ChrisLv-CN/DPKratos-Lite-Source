<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


using System;
using System.Runtime.CompilerServices;

using Extension.Components;


<#
    const int MAX_COUNT = 16;

    List<string> methodDeclarations = new();

    for (int count = 0; count < MAX_COUNT; count++) {
        StringBuilder decl = new();

        decl.Append("public static void CreateScriptComponent");
        if (count > 0) {
            decl.Append($"<{string.Join(", ", Enumerable.Range(1, count).Select(i => $"T{i}"))}>");
        }
        decl.Append("(HEAD_PARAMS");
        if (count > 0) {
            decl.Append($", {string.Join(", ",  Enumerable.Range(1, count).Select(i => $"T{i} p{i}"))}");
        }
        decl.Append(")");

        methodDeclarations.Add(decl.ToString());
    }
#>


namespace Extension.Script
{
    public static class ScriptComponentHelpers
    {
    


        //public static void CreateScriptComponent(this Component component, string scriptName, int id, string description, params object[] parameters)
        //{
        //    var script = ScriptManager.GetScript(scriptName);
        //    var scriptComponent = ScriptManager.CreateScriptableTo(component, script, parameters);
        //    scriptComponent.ID = id;
        //    scriptComponent.Name = description;
        //}
<#
for (int idx = 0; idx < MAX_COUNT; idx++) {
#>
        <#= methodDeclarations[idx].Replace("HEAD_PARAMS", "this Component component, string scriptName, int id, string description")#>
        {
            var script = ScriptManager.GetScript(scriptName);
            var scriptComponent = ScriptManager.CreateScriptableTo(component, script<#= (idx > 0 ? ", " : "") + string.Join(", ", Enumerable.Range(1, idx).Select(i => $"p{i}"))#>);
            //scriptComponent.ID = id;
            scriptComponent.Name = description;
        }

<#
}
#>
    
        //public static void CreateScriptComponent(this Component component, string scriptName, string description, params object[] parameters)
        //{
        //    component.CreateScriptComponent(scriptName, Component.NO_ID, description, parameters);
        //}
<#
for (int idx = 0; idx < MAX_COUNT; idx++) {
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        <#= methodDeclarations[idx].Replace("HEAD_PARAMS", "this Component component, string scriptName, string description")#>
        {
            component.CreateScriptComponent(scriptName, Component.NO_ID, description<#= (idx > 0 ? ", " : "") + string.Join(", ", Enumerable.Range(1, idx).Select(i => $"p{i}"))#>);
        }
<#
}
#>

        //public static void CreateScriptComponent<T>(this Component component, int id, string description, params object[] parameters) where T : ScriptComponent
        //{
        //    component.CreateScriptComponent(typeof(T).Name, id, description, parameters);
        //}

        //public static void CreateScriptComponent<T>(this Component component, string description, params object[] parameters) where T : ScriptComponent
        //{
        //    component.CreateScriptComponent<T>(Component.NO_ID, description, parameters);
        //}
    }

}

